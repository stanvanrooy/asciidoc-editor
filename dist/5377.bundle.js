/*! For license information please see 5377.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkweb_project_template=self.webpackChunkweb_project_template||[]).push([[5377],{15377:(e,t,n)=>{n.r(t),n.d(t,{setupMode:()=>Rt,setupMode1:()=>At});var r=n(87453),i=Object.defineProperty,o=Object.getOwnPropertyDescriptor,a=Object.getOwnPropertyNames,s=Object.prototype.hasOwnProperty,u={};i(u,"__esModule",{value:!0}),((e,t,n)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let r of a(t))s.call(e,r)||"default"===r||i(e,r,{get:()=>t[r],enumerable:!(n=o(t,r))||n.enumerable})})(u,r);var c,d,g,l,h,f,p,v,m,w,_,b,k,y,E,x,C,I,A,R,S,P,T,F,D,L,j,M,O,N,U,W,V,H,K,z,X,B,$,q,Q,G,J,Y,Z,ee,te,ne,re,ie=class{constructor(e){this._defaults=e,this._worker=null,this._client=null,this._idleCheckInterval=window.setInterval((()=>this._checkIfIdle()),3e4),this._lastUsedTime=0,this._configChangeListener=this._defaults.onDidChange((()=>this._stopWorker()))}_stopWorker(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null}dispose(){clearInterval(this._idleCheckInterval),this._configChangeListener.dispose(),this._stopWorker()}_checkIfIdle(){this._worker&&Date.now()-this._lastUsedTime>12e4&&this._stopWorker()}_getClient(){return this._lastUsedTime=Date.now(),this._client||(this._worker=u.editor.createWebWorker({moduleId:"vs/language/html/htmlWorker",createData:{languageSettings:this._defaults.options,languageId:this._defaults.languageId},label:this._defaults.languageId}),this._client=this._worker.getProxy()),this._client}getLanguageServiceWorker(...e){let t;return this._getClient().then((e=>{t=e})).then((t=>{if(this._worker)return this._worker.withSyncedResources(e)})).then((e=>t))}};(d=c||(c={})).MIN_VALUE=-2147483648,d.MAX_VALUE=2147483647,(l=g||(g={})).MIN_VALUE=0,l.MAX_VALUE=2147483647,(f=h||(h={})).create=function(e,t){return e===Number.MAX_VALUE&&(e=g.MAX_VALUE),t===Number.MAX_VALUE&&(t=g.MAX_VALUE),{line:e,character:t}},f.is=function(e){var t=e;return it.objectLiteral(t)&&it.uinteger(t.line)&&it.uinteger(t.character)},(v=p||(p={})).create=function(e,t,n,r){if(it.uinteger(e)&&it.uinteger(t)&&it.uinteger(n)&&it.uinteger(r))return{start:h.create(e,t),end:h.create(n,r)};if(h.is(e)&&h.is(t))return{start:e,end:t};throw new Error("Range#create called with invalid arguments["+e+", "+t+", "+n+", "+r+"]")},v.is=function(e){var t=e;return it.objectLiteral(t)&&h.is(t.start)&&h.is(t.end)},(w=m||(m={})).create=function(e,t){return{uri:e,range:t}},w.is=function(e){var t=e;return it.defined(t)&&p.is(t.range)&&(it.string(t.uri)||it.undefined(t.uri))},(b=_||(_={})).create=function(e,t,n,r){return{targetUri:e,targetRange:t,targetSelectionRange:n,originSelectionRange:r}},b.is=function(e){var t=e;return it.defined(t)&&p.is(t.targetRange)&&it.string(t.targetUri)&&(p.is(t.targetSelectionRange)||it.undefined(t.targetSelectionRange))&&(p.is(t.originSelectionRange)||it.undefined(t.originSelectionRange))},(y=k||(k={})).create=function(e,t,n,r){return{red:e,green:t,blue:n,alpha:r}},y.is=function(e){var t=e;return it.numberRange(t.red,0,1)&&it.numberRange(t.green,0,1)&&it.numberRange(t.blue,0,1)&&it.numberRange(t.alpha,0,1)},(x=E||(E={})).create=function(e,t){return{range:e,color:t}},x.is=function(e){var t=e;return p.is(t.range)&&k.is(t.color)},(I=C||(C={})).create=function(e,t,n){return{label:e,textEdit:t,additionalTextEdits:n}},I.is=function(e){var t=e;return it.string(t.label)&&(it.undefined(t.textEdit)||H.is(t))&&(it.undefined(t.additionalTextEdits)||it.typedArray(t.additionalTextEdits,H.is))},(R=A||(A={})).Comment="comment",R.Imports="imports",R.Region="region",(P=S||(S={})).create=function(e,t,n,r,i){var o={startLine:e,endLine:t};return it.defined(n)&&(o.startCharacter=n),it.defined(r)&&(o.endCharacter=r),it.defined(i)&&(o.kind=i),o},P.is=function(e){var t=e;return it.uinteger(t.startLine)&&it.uinteger(t.startLine)&&(it.undefined(t.startCharacter)||it.uinteger(t.startCharacter))&&(it.undefined(t.endCharacter)||it.uinteger(t.endCharacter))&&(it.undefined(t.kind)||it.string(t.kind))},(F=T||(T={})).create=function(e,t){return{location:e,message:t}},F.is=function(e){var t=e;return it.defined(t)&&m.is(t.location)&&it.string(t.message)},(L=D||(D={})).Error=1,L.Warning=2,L.Information=3,L.Hint=4,(M=j||(j={})).Unnecessary=1,M.Deprecated=2,(O||(O={})).is=function(e){var t=e;return null!=t&&it.string(t.href)},(U=N||(N={})).create=function(e,t,n,r,i,o){var a={range:e,message:t};return it.defined(n)&&(a.severity=n),it.defined(r)&&(a.code=r),it.defined(i)&&(a.source=i),it.defined(o)&&(a.relatedInformation=o),a},U.is=function(e){var t,n=e;return it.defined(n)&&p.is(n.range)&&it.string(n.message)&&(it.number(n.severity)||it.undefined(n.severity))&&(it.integer(n.code)||it.string(n.code)||it.undefined(n.code))&&(it.undefined(n.codeDescription)||it.string(null===(t=n.codeDescription)||void 0===t?void 0:t.href))&&(it.string(n.source)||it.undefined(n.source))&&(it.undefined(n.relatedInformation)||it.typedArray(n.relatedInformation,T.is))},(V=W||(W={})).create=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i={title:e,command:t};return it.defined(n)&&n.length>0&&(i.arguments=n),i},V.is=function(e){var t=e;return it.defined(t)&&it.string(t.title)&&it.string(t.command)},(K=H||(H={})).replace=function(e,t){return{range:e,newText:t}},K.insert=function(e,t){return{range:{start:e,end:e},newText:t}},K.del=function(e){return{range:e,newText:""}},K.is=function(e){var t=e;return it.objectLiteral(t)&&it.string(t.newText)&&p.is(t.range)},(X=z||(z={})).create=function(e,t,n){var r={label:e};return void 0!==t&&(r.needsConfirmation=t),void 0!==n&&(r.description=n),r},X.is=function(e){var t=e;return void 0!==t&&it.objectLiteral(t)&&it.string(t.label)&&(it.boolean(t.needsConfirmation)||void 0===t.needsConfirmation)&&(it.string(t.description)||void 0===t.description)},(B||(B={})).is=function(e){return"string"==typeof e},(q=$||($={})).replace=function(e,t,n){return{range:e,newText:t,annotationId:n}},q.insert=function(e,t,n){return{range:{start:e,end:e},newText:t,annotationId:n}},q.del=function(e,t){return{range:e,newText:"",annotationId:t}},q.is=function(e){var t=e;return H.is(t)&&(z.is(t.annotationId)||B.is(t.annotationId))},(G=Q||(Q={})).create=function(e,t){return{textDocument:e,edits:t}},G.is=function(e){var t=e;return it.defined(t)&&ce.is(t.textDocument)&&Array.isArray(t.edits)},(Y=J||(J={})).create=function(e,t,n){var r={kind:"create",uri:e};return void 0===t||void 0===t.overwrite&&void 0===t.ignoreIfExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},Y.is=function(e){var t=e;return t&&"create"===t.kind&&it.string(t.uri)&&(void 0===t.options||(void 0===t.options.overwrite||it.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||it.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||B.is(t.annotationId))},(ee=Z||(Z={})).create=function(e,t,n,r){var i={kind:"rename",oldUri:e,newUri:t};return void 0===n||void 0===n.overwrite&&void 0===n.ignoreIfExists||(i.options=n),void 0!==r&&(i.annotationId=r),i},ee.is=function(e){var t=e;return t&&"rename"===t.kind&&it.string(t.oldUri)&&it.string(t.newUri)&&(void 0===t.options||(void 0===t.options.overwrite||it.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||it.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||B.is(t.annotationId))},(ne=te||(te={})).create=function(e,t,n){var r={kind:"delete",uri:e};return void 0===t||void 0===t.recursive&&void 0===t.ignoreIfNotExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},ne.is=function(e){var t=e;return t&&"delete"===t.kind&&it.string(t.uri)&&(void 0===t.options||(void 0===t.options.recursive||it.boolean(t.options.recursive))&&(void 0===t.options.ignoreIfNotExists||it.boolean(t.options.ignoreIfNotExists)))&&(void 0===t.annotationId||B.is(t.annotationId))},(re||(re={})).is=function(e){var t=e;return t&&(void 0!==t.changes||void 0!==t.documentChanges)&&(void 0===t.documentChanges||t.documentChanges.every((function(e){return it.string(e.kind)?J.is(e)||Z.is(e)||te.is(e):Q.is(e)})))};var oe,ae,se,ue,ce,de,ge,le,he,fe,pe,ve,me,we,_e,be,ke,ye,Ee,xe,Ce,Ie,Ae,Re,Se,Pe,Te,Fe,De,Le,je,Me,Oe,Ne,Ue,We,Ve,He,Ke,ze,Xe,Be,$e,qe,Qe,Ge,Je,Ye,Ze,et,tt,nt=function(){function e(e,t){this.edits=e,this.changeAnnotations=t}return e.prototype.insert=function(e,t,n){var r,i;if(void 0===n?r=H.insert(e,t):B.is(n)?(i=n,r=$.insert(e,t,n)):(this.assertChangeAnnotations(this.changeAnnotations),i=this.changeAnnotations.manage(n),r=$.insert(e,t,i)),this.edits.push(r),void 0!==i)return i},e.prototype.replace=function(e,t,n){var r,i;if(void 0===n?r=H.replace(e,t):B.is(n)?(i=n,r=$.replace(e,t,n)):(this.assertChangeAnnotations(this.changeAnnotations),i=this.changeAnnotations.manage(n),r=$.replace(e,t,i)),this.edits.push(r),void 0!==i)return i},e.prototype.delete=function(e,t){var n,r;if(void 0===t?n=H.del(e):B.is(t)?(r=t,n=$.del(e,t)):(this.assertChangeAnnotations(this.changeAnnotations),r=this.changeAnnotations.manage(t),n=$.del(e,r)),this.edits.push(n),void 0!==r)return r},e.prototype.add=function(e){this.edits.push(e)},e.prototype.all=function(){return this.edits},e.prototype.clear=function(){this.edits.splice(0,this.edits.length)},e.prototype.assertChangeAnnotations=function(e){if(void 0===e)throw new Error("Text edit change is not configured to manage change annotations.")},e}(),rt=function(){function e(e){this._annotations=void 0===e?Object.create(null):e,this._counter=0,this._size=0}return e.prototype.all=function(){return this._annotations},Object.defineProperty(e.prototype,"size",{get:function(){return this._size},enumerable:!1,configurable:!0}),e.prototype.manage=function(e,t){var n;if(B.is(e)?n=e:(n=this.nextId(),t=e),void 0!==this._annotations[n])throw new Error("Id "+n+" is already in use.");if(void 0===t)throw new Error("No annotation provided for id "+n);return this._annotations[n]=t,this._size++,n},e.prototype.nextId=function(){return this._counter++,this._counter.toString()},e}();!function(){function e(e){var t=this;this._textEditChanges=Object.create(null),void 0!==e?(this._workspaceEdit=e,e.documentChanges?(this._changeAnnotations=new rt(e.changeAnnotations),e.changeAnnotations=this._changeAnnotations.all(),e.documentChanges.forEach((function(e){if(Q.is(e)){var n=new nt(e.edits,t._changeAnnotations);t._textEditChanges[e.textDocument.uri]=n}}))):e.changes&&Object.keys(e.changes).forEach((function(n){var r=new nt(e.changes[n]);t._textEditChanges[n]=r}))):this._workspaceEdit={}}Object.defineProperty(e.prototype,"edit",{get:function(){return this.initDocumentChanges(),void 0!==this._changeAnnotations&&(0===this._changeAnnotations.size?this._workspaceEdit.changeAnnotations=void 0:this._workspaceEdit.changeAnnotations=this._changeAnnotations.all()),this._workspaceEdit},enumerable:!1,configurable:!0}),e.prototype.getTextEditChange=function(e){if(ce.is(e)){if(this.initDocumentChanges(),void 0===this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var t={uri:e.uri,version:e.version};if(!(r=this._textEditChanges[t.uri])){var n={textDocument:t,edits:i=[]};this._workspaceEdit.documentChanges.push(n),r=new nt(i,this._changeAnnotations),this._textEditChanges[t.uri]=r}return r}if(this.initChanges(),void 0===this._workspaceEdit.changes)throw new Error("Workspace edit is not configured for normal text edit changes.");var r;if(!(r=this._textEditChanges[e])){var i=[];this._workspaceEdit.changes[e]=i,r=new nt(i),this._textEditChanges[e]=r}return r},e.prototype.initDocumentChanges=function(){void 0===this._workspaceEdit.documentChanges&&void 0===this._workspaceEdit.changes&&(this._changeAnnotations=new rt,this._workspaceEdit.documentChanges=[],this._workspaceEdit.changeAnnotations=this._changeAnnotations.all())},e.prototype.initChanges=function(){void 0===this._workspaceEdit.documentChanges&&void 0===this._workspaceEdit.changes&&(this._workspaceEdit.changes=Object.create(null))},e.prototype.createFile=function(e,t,n){if(this.initDocumentChanges(),void 0===this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var r,i,o;if(z.is(t)||B.is(t)?r=t:n=t,void 0===r?i=J.create(e,n):(o=B.is(r)?r:this._changeAnnotations.manage(r),i=J.create(e,n,o)),this._workspaceEdit.documentChanges.push(i),void 0!==o)return o},e.prototype.renameFile=function(e,t,n,r){if(this.initDocumentChanges(),void 0===this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var i,o,a;if(z.is(n)||B.is(n)?i=n:r=n,void 0===i?o=Z.create(e,t,r):(a=B.is(i)?i:this._changeAnnotations.manage(i),o=Z.create(e,t,r,a)),this._workspaceEdit.documentChanges.push(o),void 0!==a)return a},e.prototype.deleteFile=function(e,t,n){if(this.initDocumentChanges(),void 0===this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var r,i,o;if(z.is(t)||B.is(t)?r=t:n=t,void 0===r?i=te.create(e,n):(o=B.is(r)?r:this._changeAnnotations.manage(r),i=te.create(e,n,o)),this._workspaceEdit.documentChanges.push(i),void 0!==o)return o}}(),(ae=oe||(oe={})).create=function(e){return{uri:e}},ae.is=function(e){var t=e;return it.defined(t)&&it.string(t.uri)},(ue=se||(se={})).create=function(e,t){return{uri:e,version:t}},ue.is=function(e){var t=e;return it.defined(t)&&it.string(t.uri)&&it.integer(t.version)},(de=ce||(ce={})).create=function(e,t){return{uri:e,version:t}},de.is=function(e){var t=e;return it.defined(t)&&it.string(t.uri)&&(null===t.version||it.integer(t.version))},(le=ge||(ge={})).create=function(e,t,n,r){return{uri:e,languageId:t,version:n,text:r}},le.is=function(e){var t=e;return it.defined(t)&&it.string(t.uri)&&it.string(t.languageId)&&it.integer(t.version)&&it.string(t.text)},(fe=he||(he={})).PlainText="plaintext",fe.Markdown="markdown",function(e){e.is=function(t){var n=t;return n===e.PlainText||n===e.Markdown}}(he||(he={})),(pe||(pe={})).is=function(e){var t=e;return it.objectLiteral(e)&&he.is(t.kind)&&it.string(t.value)},(me=ve||(ve={})).Text=1,me.Method=2,me.Function=3,me.Constructor=4,me.Field=5,me.Variable=6,me.Class=7,me.Interface=8,me.Module=9,me.Property=10,me.Unit=11,me.Value=12,me.Enum=13,me.Keyword=14,me.Snippet=15,me.Color=16,me.File=17,me.Reference=18,me.Folder=19,me.EnumMember=20,me.Constant=21,me.Struct=22,me.Event=23,me.Operator=24,me.TypeParameter=25,(_e=we||(we={})).PlainText=1,_e.Snippet=2,(be||(be={})).Deprecated=1,(ye=ke||(ke={})).create=function(e,t,n){return{newText:e,insert:t,replace:n}},ye.is=function(e){var t=e;return t&&it.string(t.newText)&&p.is(t.insert)&&p.is(t.replace)},(xe=Ee||(Ee={})).asIs=1,xe.adjustIndentation=2,(Ce||(Ce={})).create=function(e){return{label:e}},(Ie||(Ie={})).create=function(e,t){return{items:e||[],isIncomplete:!!t}},(Re=Ae||(Ae={})).fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")},Re.is=function(e){var t=e;return it.string(t)||it.objectLiteral(t)&&it.string(t.language)&&it.string(t.value)},(Se||(Se={})).is=function(e){var t=e;return!!t&&it.objectLiteral(t)&&(pe.is(t.contents)||Ae.is(t.contents)||it.typedArray(t.contents,Ae.is))&&(void 0===e.range||p.is(e.range))},(Pe||(Pe={})).create=function(e,t){return t?{label:e,documentation:t}:{label:e}},(Te||(Te={})).create=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i={label:e};return it.defined(t)&&(i.documentation=t),it.defined(n)?i.parameters=n:i.parameters=[],i},(De=Fe||(Fe={})).Text=1,De.Read=2,De.Write=3,(Le||(Le={})).create=function(e,t){var n={range:e};return it.number(t)&&(n.kind=t),n},(Me=je||(je={})).File=1,Me.Module=2,Me.Namespace=3,Me.Package=4,Me.Class=5,Me.Method=6,Me.Property=7,Me.Field=8,Me.Constructor=9,Me.Enum=10,Me.Interface=11,Me.Function=12,Me.Variable=13,Me.Constant=14,Me.String=15,Me.Number=16,Me.Boolean=17,Me.Array=18,Me.Object=19,Me.Key=20,Me.Null=21,Me.EnumMember=22,Me.Struct=23,Me.Event=24,Me.Operator=25,Me.TypeParameter=26,(Oe||(Oe={})).Deprecated=1,(Ne||(Ne={})).create=function(e,t,n,r,i){var o={name:e,kind:t,location:{uri:r,range:n}};return i&&(o.containerName=i),o},(We=Ue||(Ue={})).create=function(e,t,n,r,i,o){var a={name:e,detail:t,kind:n,range:r,selectionRange:i};return void 0!==o&&(a.children=o),a},We.is=function(e){var t=e;return t&&it.string(t.name)&&it.number(t.kind)&&p.is(t.range)&&p.is(t.selectionRange)&&(void 0===t.detail||it.string(t.detail))&&(void 0===t.deprecated||it.boolean(t.deprecated))&&(void 0===t.children||Array.isArray(t.children))&&(void 0===t.tags||Array.isArray(t.tags))},(He=Ve||(Ve={})).Empty="",He.QuickFix="quickfix",He.Refactor="refactor",He.RefactorExtract="refactor.extract",He.RefactorInline="refactor.inline",He.RefactorRewrite="refactor.rewrite",He.Source="source",He.SourceOrganizeImports="source.organizeImports",He.SourceFixAll="source.fixAll",(ze=Ke||(Ke={})).create=function(e,t){var n={diagnostics:e};return null!=t&&(n.only=t),n},ze.is=function(e){var t=e;return it.defined(t)&&it.typedArray(t.diagnostics,N.is)&&(void 0===t.only||it.typedArray(t.only,it.string))},(Be=Xe||(Xe={})).create=function(e,t,n){var r={title:e},i=!0;return"string"==typeof t?(i=!1,r.kind=t):W.is(t)?r.command=t:r.edit=t,i&&void 0!==n&&(r.kind=n),r},Be.is=function(e){var t=e;return t&&it.string(t.title)&&(void 0===t.diagnostics||it.typedArray(t.diagnostics,N.is))&&(void 0===t.kind||it.string(t.kind))&&(void 0!==t.edit||void 0!==t.command)&&(void 0===t.command||W.is(t.command))&&(void 0===t.isPreferred||it.boolean(t.isPreferred))&&(void 0===t.edit||re.is(t.edit))},(qe=$e||($e={})).create=function(e,t){var n={range:e};return it.defined(t)&&(n.data=t),n},qe.is=function(e){var t=e;return it.defined(t)&&p.is(t.range)&&(it.undefined(t.command)||W.is(t.command))},(Ge=Qe||(Qe={})).create=function(e,t){return{tabSize:e,insertSpaces:t}},Ge.is=function(e){var t=e;return it.defined(t)&&it.uinteger(t.tabSize)&&it.boolean(t.insertSpaces)},(Ye=Je||(Je={})).create=function(e,t,n){return{range:e,target:t,data:n}},Ye.is=function(e){var t=e;return it.defined(t)&&p.is(t.range)&&(it.undefined(t.target)||it.string(t.target))},(et=Ze||(Ze={})).create=function(e,t){return{range:e,parent:t}},et.is=function(e){var t=e;return void 0!==t&&p.is(t.range)&&(void 0===t.parent||et.is(t.parent))},function(e){function t(e,n){if(e.length<=1)return e;var r=e.length/2|0,i=e.slice(0,r),o=e.slice(r);t(i,n),t(o,n);for(var a=0,s=0,u=0;a<i.length&&s<o.length;){var c=n(i[a],o[s]);e[u++]=c<=0?i[a++]:o[s++]}for(;a<i.length;)e[u++]=i[a++];for(;s<o.length;)e[u++]=o[s++];return e}e.create=function(e,t,n,r){return new st(e,t,n,r)},e.is=function(e){var t=e;return!!(it.defined(t)&&it.string(t.uri)&&(it.undefined(t.languageId)||it.string(t.languageId))&&it.uinteger(t.lineCount)&&it.func(t.getText)&&it.func(t.positionAt)&&it.func(t.offsetAt))},e.applyEdits=function(e,n){for(var r=e.getText(),i=t(n,(function(e,t){var n=e.range.start.line-t.range.start.line;return 0===n?e.range.start.character-t.range.start.character:n})),o=r.length,a=i.length-1;a>=0;a--){var s=i[a],u=e.offsetAt(s.range.start),c=e.offsetAt(s.range.end);if(!(c<=o))throw new Error("Overlapping edit");r=r.substring(0,u)+s.newText+r.substring(c,r.length),o=u}return r}}(tt||(tt={}));var it,ot,at,st=function(){function e(e,t,n,r){this._uri=e,this._languageId=t,this._version=n,this._content=r,this._lineOffsets=void 0}return Object.defineProperty(e.prototype,"uri",{get:function(){return this._uri},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"languageId",{get:function(){return this._languageId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version},enumerable:!1,configurable:!0}),e.prototype.getText=function(e){if(e){var t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content},e.prototype.update=function(e,t){this._content=e.text,this._version=t,this._lineOffsets=void 0},e.prototype.getLineOffsets=function(){if(void 0===this._lineOffsets){for(var e=[],t=this._content,n=!0,r=0;r<t.length;r++){n&&(e.push(r),n=!1);var i=t.charAt(r);n="\r"===i||"\n"===i,"\r"===i&&r+1<t.length&&"\n"===t.charAt(r+1)&&r++}n&&t.length>0&&e.push(t.length),this._lineOffsets=e}return this._lineOffsets},e.prototype.positionAt=function(e){e=Math.max(Math.min(e,this._content.length),0);var t=this.getLineOffsets(),n=0,r=t.length;if(0===r)return h.create(0,e);for(;n<r;){var i=Math.floor((n+r)/2);t[i]>e?r=i:n=i+1}var o=n-1;return h.create(o,e-t[o])},e.prototype.offsetAt=function(e){var t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;var n=t[e.line],r=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(n+e.character,r),n)},Object.defineProperty(e.prototype,"lineCount",{get:function(){return this.getLineOffsets().length},enumerable:!1,configurable:!0}),e}();function ut(e){if(e)return{character:e.column-1,line:e.lineNumber-1}}function ct(e){if(e)return new u.Range(e.start.line+1,e.start.character+1,e.end.line+1,e.end.character+1)}function dt(e){const t=u.languages.CompletionItemKind;switch(e){case ve.Text:return t.Text;case ve.Method:return t.Method;case ve.Function:return t.Function;case ve.Constructor:return t.Constructor;case ve.Field:return t.Field;case ve.Variable:return t.Variable;case ve.Class:return t.Class;case ve.Interface:return t.Interface;case ve.Module:return t.Module;case ve.Property:return t.Property;case ve.Unit:return t.Unit;case ve.Value:return t.Value;case ve.Enum:return t.Enum;case ve.Keyword:return t.Keyword;case ve.Snippet:return t.Snippet;case ve.Color:return t.Color;case ve.File:return t.File;case ve.Reference:return t.Reference}return t.Property}function gt(e){if(e)return{range:ct(e.range),text:e.newText}}ot=it||(it={}),at=Object.prototype.toString,ot.defined=function(e){return void 0!==e},ot.undefined=function(e){return void 0===e},ot.boolean=function(e){return!0===e||!1===e},ot.string=function(e){return"[object String]"===at.call(e)},ot.number=function(e){return"[object Number]"===at.call(e)},ot.numberRange=function(e,t,n){return"[object Number]"===at.call(e)&&t<=e&&e<=n},ot.integer=function(e){return"[object Number]"===at.call(e)&&-2147483648<=e&&e<=2147483647},ot.uinteger=function(e){return"[object Number]"===at.call(e)&&0<=e&&e<=2147483647},ot.func=function(e){return"[object Function]"===at.call(e)},ot.objectLiteral=function(e){return null!==e&&"object"==typeof e},ot.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)};var lt=class{constructor(e){this._worker=e}provideHover(e,t,n){let r=e.uri;return this._worker(r).then((e=>e.doHover(r.toString(),ut(t)))).then((e=>{if(e)return{range:ct(e.range),contents:ft(e.contents)}}))}};function ht(e){return"string"==typeof e?{value:e}:(t=e)&&"object"==typeof t&&"string"==typeof t.kind?"plaintext"===e.kind?{value:e.value.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}:{value:e.value}:{value:"```"+e.language+"\n"+e.value+"\n```\n"};var t}function ft(e){if(e)return Array.isArray(e)?e.map(ht):[ht(e)]}var pt=class{constructor(e){this._worker=e}provideDocumentHighlights(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.findDocumentHighlights(r.toString(),ut(t)))).then((e=>{if(e)return e.map((e=>({range:ct(e.range),kind:vt(e.kind)})))}))}};function vt(e){switch(e){case Fe.Read:return u.languages.DocumentHighlightKind.Read;case Fe.Write:return u.languages.DocumentHighlightKind.Write;case Fe.Text:return u.languages.DocumentHighlightKind.Text}return u.languages.DocumentHighlightKind.Text}var mt=class{constructor(e){this._worker=e}provideRenameEdits(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.doRename(i.toString(),ut(t),n))).then((e=>function(e){if(!e||!e.changes)return;let t=[];for(let n in e.changes){const r=u.Uri.parse(n);for(let i of e.changes[n])t.push({resource:r,edit:{range:ct(i.range),text:i.newText}})}return{edits:t}}(e)))}},wt=class{constructor(e){this._worker=e}provideDocumentSymbols(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentSymbols(n.toString()))).then((e=>{if(e)return e.map((e=>({name:e.name,detail:"",containerName:e.containerName,kind:_t(e.kind),range:ct(e.location.range),selectionRange:ct(e.location.range),tags:[]})))}))}};function _t(e){let t=u.languages.SymbolKind;switch(e){case je.File:return t.Array;case je.Module:return t.Module;case je.Namespace:return t.Namespace;case je.Package:return t.Package;case je.Class:return t.Class;case je.Method:return t.Method;case je.Property:return t.Property;case je.Field:return t.Field;case je.Constructor:return t.Constructor;case je.Enum:return t.Enum;case je.Interface:return t.Interface;case je.Function:return t.Function;case je.Variable:return t.Variable;case je.Constant:return t.Constant;case je.String:return t.String;case je.Number:return t.Number;case je.Boolean:return t.Boolean;case je.Array:return t.Array}return t.Function}var bt=class{constructor(e){this._worker=e}provideLinks(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentLinks(n.toString()))).then((e=>{if(e)return{links:e.map((e=>({range:ct(e.range),url:e.target})))}}))}},kt=class{constructor(e){this._worker=e}provideDocumentFormattingEdits(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.format(r.toString(),null,Et(t)).then((e=>{if(e&&0!==e.length)return e.map(gt)}))))}},yt=class{constructor(e){this._worker=e}provideDocumentRangeFormattingEdits(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.format(i.toString(),function(e){if(e)return{start:{line:e.startLineNumber-1,character:e.startColumn-1},end:{line:e.endLineNumber-1,character:e.endColumn-1}}}(t),Et(n)).then((e=>{if(e&&0!==e.length)return e.map(gt)}))))}};function Et(e){return{tabSize:e.tabSize,insertSpaces:e.insertSpaces}}var xt=class{constructor(e){this._worker=e}provideFoldingRanges(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getFoldingRanges(r.toString(),t))).then((e=>{if(e)return e.map((e=>{const t={start:e.startLine+1,end:e.endLine+1};return void 0!==e.kind&&(t.kind=function(e){switch(e){case A.Comment:return u.languages.FoldingRangeKind.Comment;case A.Imports:return u.languages.FoldingRangeKind.Imports;case A.Region:return u.languages.FoldingRangeKind.Region}}(e.kind)),t}))}))}},Ct=class{constructor(e){this._worker=e}provideSelectionRanges(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getSelectionRanges(r.toString(),t.map(ut)))).then((e=>{if(e)return e.map((e=>{const t=[];for(;e;)t.push({range:ct(e.range)}),e=e.parent;return t}))}))}},It=class extends class{constructor(e,t){this._worker=e,this._triggerCharacters=t}get triggerCharacters(){return this._triggerCharacters}provideCompletionItems(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.doComplete(i.toString(),ut(t)))).then((n=>{if(!n)return;const r=e.getWordUntilPosition(t),i=new u.Range(t.lineNumber,r.startColumn,t.lineNumber,r.endColumn),o=n.items.map((e=>{const t={label:e.label,insertText:e.insertText||e.label,sortText:e.sortText,filterText:e.filterText,documentation:e.documentation,detail:e.detail,command:(n=e.command,n&&"editor.action.triggerSuggest"===n.command?{id:n.command,title:n.title,arguments:n.arguments}:void 0),range:i,kind:dt(e.kind)};var n,r;return e.textEdit&&(void 0!==(r=e.textEdit).insert&&void 0!==r.replace?t.range={insert:ct(e.textEdit.insert),replace:ct(e.textEdit.replace)}:t.range=ct(e.textEdit.range),t.insertText=e.textEdit.newText),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map(gt)),e.insertTextFormat===we.Snippet&&(t.insertTextRules=u.languages.CompletionItemInsertTextRule.InsertAsSnippet),t}));return{isIncomplete:n.isIncomplete,suggestions:o}}))}}{constructor(e){super(e,[".",":","<",'"',"=","/"])}};function At(e){const t=new ie(e),n=(...e)=>t.getLanguageServiceWorker(...e);let r=e.languageId;u.languages.registerCompletionItemProvider(r,new It(n)),u.languages.registerHoverProvider(r,new lt(n)),u.languages.registerDocumentHighlightProvider(r,new pt(n)),u.languages.registerLinkProvider(r,new bt(n)),u.languages.registerFoldingRangeProvider(r,new xt(n)),u.languages.registerDocumentSymbolProvider(r,new wt(n)),u.languages.registerSelectionRangeProvider(r,new Ct(n)),u.languages.registerRenameProvider(r,new mt(n)),"html"===r&&(u.languages.registerDocumentFormattingEditProvider(r,new kt(n)),u.languages.registerDocumentRangeFormattingEditProvider(r,new yt(n)))}function Rt(e){const t=[],n=[],r=new ie(e);t.push(r);const i=(...e)=>r.getLanguageServiceWorker(...e);return function(){const{languageId:t,modeConfiguration:r}=e;Pt(n),r.completionItems&&n.push(u.languages.registerCompletionItemProvider(t,new It(i))),r.hovers&&n.push(u.languages.registerHoverProvider(t,new lt(i))),r.documentHighlights&&n.push(u.languages.registerDocumentHighlightProvider(t,new pt(i))),r.links&&n.push(u.languages.registerLinkProvider(t,new bt(i))),r.documentSymbols&&n.push(u.languages.registerDocumentSymbolProvider(t,new wt(i))),r.rename&&n.push(u.languages.registerRenameProvider(t,new mt(i))),r.foldingRanges&&n.push(u.languages.registerFoldingRangeProvider(t,new xt(i))),r.selectionRanges&&n.push(u.languages.registerSelectionRangeProvider(t,new Ct(i))),r.documentFormattingEdits&&n.push(u.languages.registerDocumentFormattingEditProvider(t,new kt(i))),r.documentRangeFormattingEdits&&n.push(u.languages.registerDocumentRangeFormattingEditProvider(t,new yt(i)))}(),t.push(St(n)),St(t)}function St(e){return{dispose:()=>Pt(e)}}function Pt(e){for(;e.length;)e.pop().dispose()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQWtCUyw4QkFDcEJWLEVBQVV0USxLQUFLOU8sRUFBMkJtWixVQUFVOEYsNENBQTRDNVosRUFBWSxJQUFJMFcsR0FBb0NwQyxLQUd4Sm9HLEdBQ0FaLEVBQVlyUSxLQUFLa1IsR0FBYVosSUFDdkJZLEdBQWFiLEdBRXRCLFNBQVNhLEdBQWFiLEdBQ3BCLE1BQU8sQ0FBRXphLFFBQVMsSUFBTTRhLEdBQVdILElBRXJDLFNBQVNHLEdBQVdILEdBQ2xCLEtBQU9BLEVBQVl4VixRQUNqQndWLEVBQVljLE1BQU12YiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi1wcm9qZWN0LXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2xhbmd1YWdlL2h0bWwvaHRtbE1vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVmVyc2lvbjogMC4zMS4xKDMzNzU4Nzg1OWIxYzE3MTMxNGI0MDUwMzE3MTE4OGI2Y2VhNmEzMmEpXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvbW9uYWNvLWVkaXRvci9ibG9iL21haW4vTElDRU5TRS50eHRcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX21hcmtBc01vZHVsZSA9ICh0YXJnZXQpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIF9fcmVFeHBvcnQgPSAodGFyZ2V0LCBtb2R1bGUsIGRlc2MpID0+IHtcbiAgaWYgKG1vZHVsZSAmJiB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBtb2R1bGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhtb2R1bGUpKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0YXJnZXQsIGtleSkgJiYga2V5ICE9PSBcImRlZmF1bHRcIilcbiAgICAgICAgX19kZWZQcm9wKHRhcmdldCwga2V5LCB7IGdldDogKCkgPT4gbW9kdWxlW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MobW9kdWxlLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8vIHNyYy9maWxsZXJzL21vbmFjby1lZGl0b3ItY29yZS50c1xudmFyIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzID0ge307XG5fX21hcmtBc01vZHVsZShtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cyk7XG5fX3JlRXhwb3J0KG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLCBtb25hY29fZWRpdG9yX2NvcmVfc3Rhcik7XG5pbXBvcnQgKiBhcyBtb25hY29fZWRpdG9yX2NvcmVfc3RhciBmcm9tIFwiLi4vLi4vZWRpdG9yL2VkaXRvci5hcGkuanNcIjtcblxuLy8gc3JjL2h0bWwvd29ya2VyTWFuYWdlci50c1xudmFyIFNUT1BfV0hFTl9JRExFX0ZPUiA9IDIgKiA2MCAqIDFlMztcbnZhciBXb3JrZXJNYW5hZ2VyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihkZWZhdWx0cykge1xuICAgIHRoaXMuX2RlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgdGhpcy5fd29ya2VyID0gbnVsbDtcbiAgICB0aGlzLl9jbGllbnQgPSBudWxsO1xuICAgIHRoaXMuX2lkbGVDaGVja0ludGVydmFsID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHRoaXMuX2NoZWNrSWZJZGxlKCksIDMwICogMWUzKTtcbiAgICB0aGlzLl9sYXN0VXNlZFRpbWUgPSAwO1xuICAgIHRoaXMuX2NvbmZpZ0NoYW5nZUxpc3RlbmVyID0gdGhpcy5fZGVmYXVsdHMub25EaWRDaGFuZ2UoKCkgPT4gdGhpcy5fc3RvcFdvcmtlcigpKTtcbiAgfVxuICBfc3RvcFdvcmtlcigpIHtcbiAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICB0aGlzLl93b3JrZXIuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5fd29ya2VyID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5fY2xpZW50ID0gbnVsbDtcbiAgfVxuICBkaXNwb3NlKCkge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faWRsZUNoZWNrSW50ZXJ2YWwpO1xuICAgIHRoaXMuX2NvbmZpZ0NoYW5nZUxpc3RlbmVyLmRpc3Bvc2UoKTtcbiAgICB0aGlzLl9zdG9wV29ya2VyKCk7XG4gIH1cbiAgX2NoZWNrSWZJZGxlKCkge1xuICAgIGlmICghdGhpcy5fd29ya2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB0aW1lUGFzc2VkU2luY2VMYXN0VXNlZCA9IERhdGUubm93KCkgLSB0aGlzLl9sYXN0VXNlZFRpbWU7XG4gICAgaWYgKHRpbWVQYXNzZWRTaW5jZUxhc3RVc2VkID4gU1RPUF9XSEVOX0lETEVfRk9SKSB7XG4gICAgICB0aGlzLl9zdG9wV29ya2VyKCk7XG4gICAgfVxuICB9XG4gIF9nZXRDbGllbnQoKSB7XG4gICAgdGhpcy5fbGFzdFVzZWRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBpZiAoIXRoaXMuX2NsaWVudCkge1xuICAgICAgdGhpcy5fd29ya2VyID0gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMuZWRpdG9yLmNyZWF0ZVdlYldvcmtlcih7XG4gICAgICAgIG1vZHVsZUlkOiBcInZzL2xhbmd1YWdlL2h0bWwvaHRtbFdvcmtlclwiLFxuICAgICAgICBjcmVhdGVEYXRhOiB7XG4gICAgICAgICAgbGFuZ3VhZ2VTZXR0aW5nczogdGhpcy5fZGVmYXVsdHMub3B0aW9ucyxcbiAgICAgICAgICBsYW5ndWFnZUlkOiB0aGlzLl9kZWZhdWx0cy5sYW5ndWFnZUlkXG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsOiB0aGlzLl9kZWZhdWx0cy5sYW5ndWFnZUlkXG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2NsaWVudCA9IHRoaXMuX3dvcmtlci5nZXRQcm94eSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2xpZW50O1xuICB9XG4gIGdldExhbmd1YWdlU2VydmljZVdvcmtlciguLi5yZXNvdXJjZXMpIHtcbiAgICBsZXQgX2NsaWVudDtcbiAgICByZXR1cm4gdGhpcy5fZ2V0Q2xpZW50KCkudGhlbigoY2xpZW50KSA9PiB7XG4gICAgICBfY2xpZW50ID0gY2xpZW50O1xuICAgIH0pLnRoZW4oKF8pID0+IHtcbiAgICAgIGlmICh0aGlzLl93b3JrZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dvcmtlci53aXRoU3luY2VkUmVzb3VyY2VzKHJlc291cmNlcyk7XG4gICAgICB9XG4gICAgfSkudGhlbigoXykgPT4gX2NsaWVudCk7XG4gIH1cbn07XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItdHlwZXMvbGliL2VzbS9tYWluLmpzXG5cInVzZSBzdHJpY3RcIjtcbnZhciBpbnRlZ2VyO1xuKGZ1bmN0aW9uKGludGVnZXIyKSB7XG4gIGludGVnZXIyLk1JTl9WQUxVRSA9IC0yMTQ3NDgzNjQ4O1xuICBpbnRlZ2VyMi5NQVhfVkFMVUUgPSAyMTQ3NDgzNjQ3O1xufSkoaW50ZWdlciB8fCAoaW50ZWdlciA9IHt9KSk7XG52YXIgdWludGVnZXI7XG4oZnVuY3Rpb24odWludGVnZXIyKSB7XG4gIHVpbnRlZ2VyMi5NSU5fVkFMVUUgPSAwO1xuICB1aW50ZWdlcjIuTUFYX1ZBTFVFID0gMjE0NzQ4MzY0Nztcbn0pKHVpbnRlZ2VyIHx8ICh1aW50ZWdlciA9IHt9KSk7XG52YXIgUG9zaXRpb247XG4oZnVuY3Rpb24oUG9zaXRpb24zKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShsaW5lLCBjaGFyYWN0ZXIpIHtcbiAgICBpZiAobGluZSA9PT0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgbGluZSA9IHVpbnRlZ2VyLk1BWF9WQUxVRTtcbiAgICB9XG4gICAgaWYgKGNoYXJhY3RlciA9PT0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgY2hhcmFjdGVyID0gdWludGVnZXIuTUFYX1ZBTFVFO1xuICAgIH1cbiAgICByZXR1cm4geyBsaW5lLCBjaGFyYWN0ZXIgfTtcbiAgfVxuICBQb3NpdGlvbjMuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS5saW5lKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUuY2hhcmFjdGVyKTtcbiAgfVxuICBQb3NpdGlvbjMuaXMgPSBpcztcbn0pKFBvc2l0aW9uIHx8IChQb3NpdGlvbiA9IHt9KSk7XG52YXIgUmFuZ2U7XG4oZnVuY3Rpb24oUmFuZ2UzKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShvbmUsIHR3bywgdGhyZWUsIGZvdXIpIHtcbiAgICBpZiAoSXMudWludGVnZXIob25lKSAmJiBJcy51aW50ZWdlcih0d28pICYmIElzLnVpbnRlZ2VyKHRocmVlKSAmJiBJcy51aW50ZWdlcihmb3VyKSkge1xuICAgICAgcmV0dXJuIHsgc3RhcnQ6IFBvc2l0aW9uLmNyZWF0ZShvbmUsIHR3byksIGVuZDogUG9zaXRpb24uY3JlYXRlKHRocmVlLCBmb3VyKSB9O1xuICAgIH0gZWxzZSBpZiAoUG9zaXRpb24uaXMob25lKSAmJiBQb3NpdGlvbi5pcyh0d28pKSB7XG4gICAgICByZXR1cm4geyBzdGFydDogb25lLCBlbmQ6IHR3byB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSYW5nZSNjcmVhdGUgY2FsbGVkIHdpdGggaW52YWxpZCBhcmd1bWVudHNbXCIgKyBvbmUgKyBcIiwgXCIgKyB0d28gKyBcIiwgXCIgKyB0aHJlZSArIFwiLCBcIiArIGZvdXIgKyBcIl1cIik7XG4gICAgfVxuICB9XG4gIFJhbmdlMy5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgUG9zaXRpb24uaXMoY2FuZGlkYXRlLnN0YXJ0KSAmJiBQb3NpdGlvbi5pcyhjYW5kaWRhdGUuZW5kKTtcbiAgfVxuICBSYW5nZTMuaXMgPSBpcztcbn0pKFJhbmdlIHx8IChSYW5nZSA9IHt9KSk7XG52YXIgTG9jYXRpb247XG4oZnVuY3Rpb24oTG9jYXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIHJhbmdlKSB7XG4gICAgcmV0dXJuIHsgdXJpLCByYW5nZSB9O1xuICB9XG4gIExvY2F0aW9uMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUudXJpKSk7XG4gIH1cbiAgTG9jYXRpb24yLmlzID0gaXM7XG59KShMb2NhdGlvbiB8fCAoTG9jYXRpb24gPSB7fSkpO1xudmFyIExvY2F0aW9uTGluaztcbihmdW5jdGlvbihMb2NhdGlvbkxpbmsyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh0YXJnZXRVcmksIHRhcmdldFJhbmdlLCB0YXJnZXRTZWxlY3Rpb25SYW5nZSwgb3JpZ2luU2VsZWN0aW9uUmFuZ2UpIHtcbiAgICByZXR1cm4geyB0YXJnZXRVcmksIHRhcmdldFJhbmdlLCB0YXJnZXRTZWxlY3Rpb25SYW5nZSwgb3JpZ2luU2VsZWN0aW9uUmFuZ2UgfTtcbiAgfVxuICBMb2NhdGlvbkxpbmsyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUudGFyZ2V0UmFuZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGFyZ2V0VXJpKSAmJiAoUmFuZ2UuaXMoY2FuZGlkYXRlLnRhcmdldFNlbGVjdGlvblJhbmdlKSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLnRhcmdldFNlbGVjdGlvblJhbmdlKSkgJiYgKFJhbmdlLmlzKGNhbmRpZGF0ZS5vcmlnaW5TZWxlY3Rpb25SYW5nZSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5vcmlnaW5TZWxlY3Rpb25SYW5nZSkpO1xuICB9XG4gIExvY2F0aW9uTGluazIuaXMgPSBpcztcbn0pKExvY2F0aW9uTGluayB8fCAoTG9jYXRpb25MaW5rID0ge30pKTtcbnZhciBDb2xvcjtcbihmdW5jdGlvbihDb2xvcjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlZCxcbiAgICAgIGdyZWVuLFxuICAgICAgYmx1ZSxcbiAgICAgIGFscGhhXG4gICAgfTtcbiAgfVxuICBDb2xvcjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMubnVtYmVyUmFuZ2UoY2FuZGlkYXRlLnJlZCwgMCwgMSkgJiYgSXMubnVtYmVyUmFuZ2UoY2FuZGlkYXRlLmdyZWVuLCAwLCAxKSAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUuYmx1ZSwgMCwgMSkgJiYgSXMubnVtYmVyUmFuZ2UoY2FuZGlkYXRlLmFscGhhLCAwLCAxKTtcbiAgfVxuICBDb2xvcjIuaXMgPSBpcztcbn0pKENvbG9yIHx8IChDb2xvciA9IHt9KSk7XG52YXIgQ29sb3JJbmZvcm1hdGlvbjtcbihmdW5jdGlvbihDb2xvckluZm9ybWF0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIGNvbG9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJhbmdlLFxuICAgICAgY29sb3JcbiAgICB9O1xuICB9XG4gIENvbG9ySW5mb3JtYXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgQ29sb3IuaXMoY2FuZGlkYXRlLmNvbG9yKTtcbiAgfVxuICBDb2xvckluZm9ybWF0aW9uMi5pcyA9IGlzO1xufSkoQ29sb3JJbmZvcm1hdGlvbiB8fCAoQ29sb3JJbmZvcm1hdGlvbiA9IHt9KSk7XG52YXIgQ29sb3JQcmVzZW50YXRpb247XG4oZnVuY3Rpb24oQ29sb3JQcmVzZW50YXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCwgdGV4dEVkaXQsIGFkZGl0aW9uYWxUZXh0RWRpdHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWwsXG4gICAgICB0ZXh0RWRpdCxcbiAgICAgIGFkZGl0aW9uYWxUZXh0RWRpdHNcbiAgICB9O1xuICB9XG4gIENvbG9yUHJlc2VudGF0aW9uMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhYmVsKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS50ZXh0RWRpdCkgfHwgVGV4dEVkaXQuaXMoY2FuZGlkYXRlKSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuYWRkaXRpb25hbFRleHRFZGl0cykgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUuYWRkaXRpb25hbFRleHRFZGl0cywgVGV4dEVkaXQuaXMpKTtcbiAgfVxuICBDb2xvclByZXNlbnRhdGlvbjIuaXMgPSBpcztcbn0pKENvbG9yUHJlc2VudGF0aW9uIHx8IChDb2xvclByZXNlbnRhdGlvbiA9IHt9KSk7XG52YXIgRm9sZGluZ1JhbmdlS2luZDtcbihmdW5jdGlvbihGb2xkaW5nUmFuZ2VLaW5kMikge1xuICBGb2xkaW5nUmFuZ2VLaW5kMltcIkNvbW1lbnRcIl0gPSBcImNvbW1lbnRcIjtcbiAgRm9sZGluZ1JhbmdlS2luZDJbXCJJbXBvcnRzXCJdID0gXCJpbXBvcnRzXCI7XG4gIEZvbGRpbmdSYW5nZUtpbmQyW1wiUmVnaW9uXCJdID0gXCJyZWdpb25cIjtcbn0pKEZvbGRpbmdSYW5nZUtpbmQgfHwgKEZvbGRpbmdSYW5nZUtpbmQgPSB7fSkpO1xudmFyIEZvbGRpbmdSYW5nZTtcbihmdW5jdGlvbihGb2xkaW5nUmFuZ2UyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShzdGFydExpbmUsIGVuZExpbmUsIHN0YXJ0Q2hhcmFjdGVyLCBlbmRDaGFyYWN0ZXIsIGtpbmQpIHtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgc3RhcnRMaW5lLFxuICAgICAgZW5kTGluZVxuICAgIH07XG4gICAgaWYgKElzLmRlZmluZWQoc3RhcnRDaGFyYWN0ZXIpKSB7XG4gICAgICByZXN1bHQuc3RhcnRDaGFyYWN0ZXIgPSBzdGFydENoYXJhY3RlcjtcbiAgICB9XG4gICAgaWYgKElzLmRlZmluZWQoZW5kQ2hhcmFjdGVyKSkge1xuICAgICAgcmVzdWx0LmVuZENoYXJhY3RlciA9IGVuZENoYXJhY3RlcjtcbiAgICB9XG4gICAgaWYgKElzLmRlZmluZWQoa2luZCkpIHtcbiAgICAgIHJlc3VsdC5raW5kID0ga2luZDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBGb2xkaW5nUmFuZ2UyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS5zdGFydExpbmUpICYmIElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS5zdGFydExpbmUpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLnN0YXJ0Q2hhcmFjdGVyKSB8fCBJcy51aW50ZWdlcihjYW5kaWRhdGUuc3RhcnRDaGFyYWN0ZXIpKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5lbmRDaGFyYWN0ZXIpIHx8IElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS5lbmRDaGFyYWN0ZXIpKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5raW5kKSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmtpbmQpKTtcbiAgfVxuICBGb2xkaW5nUmFuZ2UyLmlzID0gaXM7XG59KShGb2xkaW5nUmFuZ2UgfHwgKEZvbGRpbmdSYW5nZSA9IHt9KSk7XG52YXIgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbjtcbihmdW5jdGlvbihEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUobG9jYXRpb24sIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbG9jYXRpb24sXG4gICAgICBtZXNzYWdlXG4gICAgfTtcbiAgfVxuICBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgTG9jYXRpb24uaXMoY2FuZGlkYXRlLmxvY2F0aW9uKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm1lc3NhZ2UpO1xuICB9XG4gIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24yLmlzID0gaXM7XG59KShEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uIHx8IChEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uID0ge30pKTtcbnZhciBEaWFnbm9zdGljU2V2ZXJpdHk7XG4oZnVuY3Rpb24oRGlhZ25vc3RpY1NldmVyaXR5Mikge1xuICBEaWFnbm9zdGljU2V2ZXJpdHkyLkVycm9yID0gMTtcbiAgRGlhZ25vc3RpY1NldmVyaXR5Mi5XYXJuaW5nID0gMjtcbiAgRGlhZ25vc3RpY1NldmVyaXR5Mi5JbmZvcm1hdGlvbiA9IDM7XG4gIERpYWdub3N0aWNTZXZlcml0eTIuSGludCA9IDQ7XG59KShEaWFnbm9zdGljU2V2ZXJpdHkgfHwgKERpYWdub3N0aWNTZXZlcml0eSA9IHt9KSk7XG52YXIgRGlhZ25vc3RpY1RhZztcbihmdW5jdGlvbihEaWFnbm9zdGljVGFnMikge1xuICBEaWFnbm9zdGljVGFnMi5Vbm5lY2Vzc2FyeSA9IDE7XG4gIERpYWdub3N0aWNUYWcyLkRlcHJlY2F0ZWQgPSAyO1xufSkoRGlhZ25vc3RpY1RhZyB8fCAoRGlhZ25vc3RpY1RhZyA9IHt9KSk7XG52YXIgQ29kZURlc2NyaXB0aW9uO1xuKGZ1bmN0aW9uKENvZGVEZXNjcmlwdGlvbjIpIHtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdm9pZCAwICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmhyZWYpO1xuICB9XG4gIENvZGVEZXNjcmlwdGlvbjIuaXMgPSBpcztcbn0pKENvZGVEZXNjcmlwdGlvbiB8fCAoQ29kZURlc2NyaXB0aW9uID0ge30pKTtcbnZhciBEaWFnbm9zdGljO1xuKGZ1bmN0aW9uKERpYWdub3N0aWMyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgbWVzc2FnZSwgc2V2ZXJpdHksIGNvZGUsIHNvdXJjZSwgcmVsYXRlZEluZm9ybWF0aW9uKSB7XG4gICAgdmFyIHJlc3VsdCA9IHsgcmFuZ2UsIG1lc3NhZ2UgfTtcbiAgICBpZiAoSXMuZGVmaW5lZChzZXZlcml0eSkpIHtcbiAgICAgIHJlc3VsdC5zZXZlcml0eSA9IHNldmVyaXR5O1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChjb2RlKSkge1xuICAgICAgcmVzdWx0LmNvZGUgPSBjb2RlO1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChzb3VyY2UpKSB7XG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChyZWxhdGVkSW5mb3JtYXRpb24pKSB7XG4gICAgICByZXN1bHQucmVsYXRlZEluZm9ybWF0aW9uID0gcmVsYXRlZEluZm9ybWF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIERpYWdub3N0aWMyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm1lc3NhZ2UpICYmIChJcy5udW1iZXIoY2FuZGlkYXRlLnNldmVyaXR5KSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLnNldmVyaXR5KSkgJiYgKElzLmludGVnZXIoY2FuZGlkYXRlLmNvZGUpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUuY29kZSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5jb2RlKSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuY29kZURlc2NyaXB0aW9uKSB8fCBJcy5zdHJpbmcoKF9hID0gY2FuZGlkYXRlLmNvZGVEZXNjcmlwdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmhyZWYpKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5zb3VyY2UpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUuc291cmNlKSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUucmVsYXRlZEluZm9ybWF0aW9uKSB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5yZWxhdGVkSW5mb3JtYXRpb24sIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24uaXMpKTtcbiAgfVxuICBEaWFnbm9zdGljMi5pcyA9IGlzO1xufSkoRGlhZ25vc3RpYyB8fCAoRGlhZ25vc3RpYyA9IHt9KSk7XG52YXIgQ29tbWFuZDtcbihmdW5jdGlvbihDb21tYW5kMikge1xuICBmdW5jdGlvbiBjcmVhdGUodGl0bGUsIGNvbW1hbmQpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0geyB0aXRsZSwgY29tbWFuZCB9O1xuICAgIGlmIChJcy5kZWZpbmVkKGFyZ3MpICYmIGFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgcmVzdWx0LmFyZ3VtZW50cyA9IGFyZ3M7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgQ29tbWFuZDIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGl0bGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUuY29tbWFuZCk7XG4gIH1cbiAgQ29tbWFuZDIuaXMgPSBpcztcbn0pKENvbW1hbmQgfHwgKENvbW1hbmQgPSB7fSkpO1xudmFyIFRleHRFZGl0O1xuKGZ1bmN0aW9uKFRleHRFZGl0Mikge1xuICBmdW5jdGlvbiByZXBsYWNlKHJhbmdlLCBuZXdUZXh0KSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIG5ld1RleHQgfTtcbiAgfVxuICBUZXh0RWRpdDIucmVwbGFjZSA9IHJlcGxhY2U7XG4gIGZ1bmN0aW9uIGluc2VydChwb3NpdGlvbiwgbmV3VGV4dCkge1xuICAgIHJldHVybiB7IHJhbmdlOiB7IHN0YXJ0OiBwb3NpdGlvbiwgZW5kOiBwb3NpdGlvbiB9LCBuZXdUZXh0IH07XG4gIH1cbiAgVGV4dEVkaXQyLmluc2VydCA9IGluc2VydDtcbiAgZnVuY3Rpb24gZGVsKHJhbmdlKSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIG5ld1RleHQ6IFwiXCIgfTtcbiAgfVxuICBUZXh0RWRpdDIuZGVsID0gZGVsO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmV3VGV4dCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKTtcbiAgfVxuICBUZXh0RWRpdDIuaXMgPSBpcztcbn0pKFRleHRFZGl0IHx8IChUZXh0RWRpdCA9IHt9KSk7XG52YXIgQ2hhbmdlQW5ub3RhdGlvbjtcbihmdW5jdGlvbihDaGFuZ2VBbm5vdGF0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUobGFiZWwsIG5lZWRzQ29uZmlybWF0aW9uLCBkZXNjcmlwdGlvbikge1xuICAgIHZhciByZXN1bHQgPSB7IGxhYmVsIH07XG4gICAgaWYgKG5lZWRzQ29uZmlybWF0aW9uICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5uZWVkc0NvbmZpcm1hdGlvbiA9IG5lZWRzQ29uZmlybWF0aW9uO1xuICAgIH1cbiAgICBpZiAoZGVzY3JpcHRpb24gIT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0LmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgQ2hhbmdlQW5ub3RhdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICE9PSB2b2lkIDAgJiYgSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubGFiZWwpICYmIChJcy5ib29sZWFuKGNhbmRpZGF0ZS5uZWVkc0NvbmZpcm1hdGlvbikgfHwgY2FuZGlkYXRlLm5lZWRzQ29uZmlybWF0aW9uID09PSB2b2lkIDApICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLmRlc2NyaXB0aW9uKSB8fCBjYW5kaWRhdGUuZGVzY3JpcHRpb24gPT09IHZvaWQgMCk7XG4gIH1cbiAgQ2hhbmdlQW5ub3RhdGlvbjIuaXMgPSBpcztcbn0pKENoYW5nZUFubm90YXRpb24gfHwgKENoYW5nZUFubm90YXRpb24gPSB7fSkpO1xudmFyIENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyO1xuKGZ1bmN0aW9uKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyMikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gdHlwZW9mIGNhbmRpZGF0ZSA9PT0gXCJzdHJpbmdcIjtcbiAgfVxuICBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllcjIuaXMgPSBpcztcbn0pKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyIHx8IChDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllciA9IHt9KSk7XG52YXIgQW5ub3RhdGVkVGV4dEVkaXQ7XG4oZnVuY3Rpb24oQW5ub3RhdGVkVGV4dEVkaXQyKSB7XG4gIGZ1bmN0aW9uIHJlcGxhY2UocmFuZ2UsIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICByZXR1cm4geyByYW5nZSwgbmV3VGV4dCwgYW5ub3RhdGlvbklkOiBhbm5vdGF0aW9uIH07XG4gIH1cbiAgQW5ub3RhdGVkVGV4dEVkaXQyLnJlcGxhY2UgPSByZXBsYWNlO1xuICBmdW5jdGlvbiBpbnNlcnQocG9zaXRpb24sIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICByZXR1cm4geyByYW5nZTogeyBzdGFydDogcG9zaXRpb24sIGVuZDogcG9zaXRpb24gfSwgbmV3VGV4dCwgYW5ub3RhdGlvbklkOiBhbm5vdGF0aW9uIH07XG4gIH1cbiAgQW5ub3RhdGVkVGV4dEVkaXQyLmluc2VydCA9IGluc2VydDtcbiAgZnVuY3Rpb24gZGVsKHJhbmdlLCBhbm5vdGF0aW9uKSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIG5ld1RleHQ6IFwiXCIsIGFubm90YXRpb25JZDogYW5ub3RhdGlvbiB9O1xuICB9XG4gIEFubm90YXRlZFRleHRFZGl0Mi5kZWwgPSBkZWw7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBUZXh0RWRpdC5pcyhjYW5kaWRhdGUpICYmIChDaGFuZ2VBbm5vdGF0aW9uLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpKTtcbiAgfVxuICBBbm5vdGF0ZWRUZXh0RWRpdDIuaXMgPSBpcztcbn0pKEFubm90YXRlZFRleHRFZGl0IHx8IChBbm5vdGF0ZWRUZXh0RWRpdCA9IHt9KSk7XG52YXIgVGV4dERvY3VtZW50RWRpdDtcbihmdW5jdGlvbihUZXh0RG9jdW1lbnRFZGl0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUodGV4dERvY3VtZW50LCBlZGl0cykge1xuICAgIHJldHVybiB7IHRleHREb2N1bWVudCwgZWRpdHMgfTtcbiAgfVxuICBUZXh0RG9jdW1lbnRFZGl0Mi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS50ZXh0RG9jdW1lbnQpICYmIEFycmF5LmlzQXJyYXkoY2FuZGlkYXRlLmVkaXRzKTtcbiAgfVxuICBUZXh0RG9jdW1lbnRFZGl0Mi5pcyA9IGlzO1xufSkoVGV4dERvY3VtZW50RWRpdCB8fCAoVGV4dERvY3VtZW50RWRpdCA9IHt9KSk7XG52YXIgQ3JlYXRlRmlsZTtcbihmdW5jdGlvbihDcmVhdGVGaWxlMikge1xuICBmdW5jdGlvbiBjcmVhdGUodXJpLCBvcHRpb25zLCBhbm5vdGF0aW9uKSB7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIGtpbmQ6IFwiY3JlYXRlXCIsXG4gICAgICB1cmlcbiAgICB9O1xuICAgIGlmIChvcHRpb25zICE9PSB2b2lkIDAgJiYgKG9wdGlvbnMub3ZlcndyaXRlICE9PSB2b2lkIDAgfHwgb3B0aW9ucy5pZ25vcmVJZkV4aXN0cyAhPT0gdm9pZCAwKSkge1xuICAgICAgcmVzdWx0Lm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBpZiAoYW5ub3RhdGlvbiAhPT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQuYW5ub3RhdGlvbklkID0gYW5ub3RhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBDcmVhdGVGaWxlMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgJiYgY2FuZGlkYXRlLmtpbmQgPT09IFwiY3JlYXRlXCIgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpICYmIChjYW5kaWRhdGUub3B0aW9ucyA9PT0gdm9pZCAwIHx8IChjYW5kaWRhdGUub3B0aW9ucy5vdmVyd3JpdGUgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLm92ZXJ3cml0ZSkpICYmIChjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZkV4aXN0cyA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZFeGlzdHMpKSkgJiYgKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQgPT09IHZvaWQgMCB8fCBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhjYW5kaWRhdGUuYW5ub3RhdGlvbklkKSk7XG4gIH1cbiAgQ3JlYXRlRmlsZTIuaXMgPSBpcztcbn0pKENyZWF0ZUZpbGUgfHwgKENyZWF0ZUZpbGUgPSB7fSkpO1xudmFyIFJlbmFtZUZpbGU7XG4oZnVuY3Rpb24oUmVuYW1lRmlsZTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKG9sZFVyaSwgbmV3VXJpLCBvcHRpb25zLCBhbm5vdGF0aW9uKSB7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIGtpbmQ6IFwicmVuYW1lXCIsXG4gICAgICBvbGRVcmksXG4gICAgICBuZXdVcmlcbiAgICB9O1xuICAgIGlmIChvcHRpb25zICE9PSB2b2lkIDAgJiYgKG9wdGlvbnMub3ZlcndyaXRlICE9PSB2b2lkIDAgfHwgb3B0aW9ucy5pZ25vcmVJZkV4aXN0cyAhPT0gdm9pZCAwKSkge1xuICAgICAgcmVzdWx0Lm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBpZiAoYW5ub3RhdGlvbiAhPT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQuYW5ub3RhdGlvbklkID0gYW5ub3RhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBSZW5hbWVGaWxlMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgJiYgY2FuZGlkYXRlLmtpbmQgPT09IFwicmVuYW1lXCIgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5vbGRVcmkpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmV3VXJpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMgPT09IHZvaWQgMCB8fCAoY2FuZGlkYXRlLm9wdGlvbnMub3ZlcndyaXRlID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5vdmVyd3JpdGUpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZFeGlzdHMgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmRXhpc3RzKSkpICYmIChjYW5kaWRhdGUuYW5ub3RhdGlvbklkID09PSB2b2lkIDAgfHwgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkpO1xuICB9XG4gIFJlbmFtZUZpbGUyLmlzID0gaXM7XG59KShSZW5hbWVGaWxlIHx8IChSZW5hbWVGaWxlID0ge30pKTtcbnZhciBEZWxldGVGaWxlO1xuKGZ1bmN0aW9uKERlbGV0ZUZpbGUyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIG9wdGlvbnMsIGFubm90YXRpb24pIHtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAga2luZDogXCJkZWxldGVcIixcbiAgICAgIHVyaVxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMgIT09IHZvaWQgMCAmJiAob3B0aW9ucy5yZWN1cnNpdmUgIT09IHZvaWQgMCB8fCBvcHRpb25zLmlnbm9yZUlmTm90RXhpc3RzICE9PSB2b2lkIDApKSB7XG4gICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGlmIChhbm5vdGF0aW9uICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5hbm5vdGF0aW9uSWQgPSBhbm5vdGF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIERlbGV0ZUZpbGUyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBjYW5kaWRhdGUua2luZCA9PT0gXCJkZWxldGVcIiAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zID09PSB2b2lkIDAgfHwgKGNhbmRpZGF0ZS5vcHRpb25zLnJlY3Vyc2l2ZSA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMucmVjdXJzaXZlKSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmTm90RXhpc3RzID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZk5vdEV4aXN0cykpKSAmJiAoY2FuZGlkYXRlLmFubm90YXRpb25JZCA9PT0gdm9pZCAwIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpKTtcbiAgfVxuICBEZWxldGVGaWxlMi5pcyA9IGlzO1xufSkoRGVsZXRlRmlsZSB8fCAoRGVsZXRlRmlsZSA9IHt9KSk7XG52YXIgV29ya3NwYWNlRWRpdDtcbihmdW5jdGlvbihXb3Jrc3BhY2VFZGl0Mikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIChjYW5kaWRhdGUuY2hhbmdlcyAhPT0gdm9pZCAwIHx8IGNhbmRpZGF0ZS5kb2N1bWVudENoYW5nZXMgIT09IHZvaWQgMCkgJiYgKGNhbmRpZGF0ZS5kb2N1bWVudENoYW5nZXMgPT09IHZvaWQgMCB8fCBjYW5kaWRhdGUuZG9jdW1lbnRDaGFuZ2VzLmV2ZXJ5KGZ1bmN0aW9uKGNoYW5nZSkge1xuICAgICAgaWYgKElzLnN0cmluZyhjaGFuZ2Uua2luZCkpIHtcbiAgICAgICAgcmV0dXJuIENyZWF0ZUZpbGUuaXMoY2hhbmdlKSB8fCBSZW5hbWVGaWxlLmlzKGNoYW5nZSkgfHwgRGVsZXRlRmlsZS5pcyhjaGFuZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFRleHREb2N1bWVudEVkaXQuaXMoY2hhbmdlKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cbiAgV29ya3NwYWNlRWRpdDIuaXMgPSBpcztcbn0pKFdvcmtzcGFjZUVkaXQgfHwgKFdvcmtzcGFjZUVkaXQgPSB7fSkpO1xudmFyIFRleHRFZGl0Q2hhbmdlSW1wbCA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBUZXh0RWRpdENoYW5nZUltcGwyKGVkaXRzLCBjaGFuZ2VBbm5vdGF0aW9ucykge1xuICAgIHRoaXMuZWRpdHMgPSBlZGl0cztcbiAgICB0aGlzLmNoYW5nZUFubm90YXRpb25zID0gY2hhbmdlQW5ub3RhdGlvbnM7XG4gIH1cbiAgVGV4dEVkaXRDaGFuZ2VJbXBsMi5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24ocG9zaXRpb24sIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICB2YXIgZWRpdDtcbiAgICB2YXIgaWQ7XG4gICAgaWYgKGFubm90YXRpb24gPT09IHZvaWQgMCkge1xuICAgICAgZWRpdCA9IFRleHRFZGl0Lmluc2VydChwb3NpdGlvbiwgbmV3VGV4dCk7XG4gICAgfSBlbHNlIGlmIChDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhhbm5vdGF0aW9uKSkge1xuICAgICAgaWQgPSBhbm5vdGF0aW9uO1xuICAgICAgZWRpdCA9IEFubm90YXRlZFRleHRFZGl0Lmluc2VydChwb3NpdGlvbiwgbmV3VGV4dCwgYW5ub3RhdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXNzZXJ0Q2hhbmdlQW5ub3RhdGlvbnModGhpcy5jaGFuZ2VBbm5vdGF0aW9ucyk7XG4gICAgICBpZCA9IHRoaXMuY2hhbmdlQW5ub3RhdGlvbnMubWFuYWdlKGFubm90YXRpb24pO1xuICAgICAgZWRpdCA9IEFubm90YXRlZFRleHRFZGl0Lmluc2VydChwb3NpdGlvbiwgbmV3VGV4dCwgaWQpO1xuICAgIH1cbiAgICB0aGlzLmVkaXRzLnB1c2goZWRpdCk7XG4gICAgaWYgKGlkICE9PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gIH07XG4gIFRleHRFZGl0Q2hhbmdlSW1wbDIucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbihyYW5nZSwgbmV3VGV4dCwgYW5ub3RhdGlvbikge1xuICAgIHZhciBlZGl0O1xuICAgIHZhciBpZDtcbiAgICBpZiAoYW5ub3RhdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBlZGl0ID0gVGV4dEVkaXQucmVwbGFjZShyYW5nZSwgbmV3VGV4dCk7XG4gICAgfSBlbHNlIGlmIChDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhhbm5vdGF0aW9uKSkge1xuICAgICAgaWQgPSBhbm5vdGF0aW9uO1xuICAgICAgZWRpdCA9IEFubm90YXRlZFRleHRFZGl0LnJlcGxhY2UocmFuZ2UsIG5ld1RleHQsIGFubm90YXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydENoYW5nZUFubm90YXRpb25zKHRoaXMuY2hhbmdlQW5ub3RhdGlvbnMpO1xuICAgICAgaWQgPSB0aGlzLmNoYW5nZUFubm90YXRpb25zLm1hbmFnZShhbm5vdGF0aW9uKTtcbiAgICAgIGVkaXQgPSBBbm5vdGF0ZWRUZXh0RWRpdC5yZXBsYWNlKHJhbmdlLCBuZXdUZXh0LCBpZCk7XG4gICAgfVxuICAgIHRoaXMuZWRpdHMucHVzaChlZGl0KTtcbiAgICBpZiAoaWQgIT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgfTtcbiAgVGV4dEVkaXRDaGFuZ2VJbXBsMi5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24ocmFuZ2UsIGFubm90YXRpb24pIHtcbiAgICB2YXIgZWRpdDtcbiAgICB2YXIgaWQ7XG4gICAgaWYgKGFubm90YXRpb24gPT09IHZvaWQgMCkge1xuICAgICAgZWRpdCA9IFRleHRFZGl0LmRlbChyYW5nZSk7XG4gICAgfSBlbHNlIGlmIChDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhhbm5vdGF0aW9uKSkge1xuICAgICAgaWQgPSBhbm5vdGF0aW9uO1xuICAgICAgZWRpdCA9IEFubm90YXRlZFRleHRFZGl0LmRlbChyYW5nZSwgYW5ub3RhdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXNzZXJ0Q2hhbmdlQW5ub3RhdGlvbnModGhpcy5jaGFuZ2VBbm5vdGF0aW9ucyk7XG4gICAgICBpZCA9IHRoaXMuY2hhbmdlQW5ub3RhdGlvbnMubWFuYWdlKGFubm90YXRpb24pO1xuICAgICAgZWRpdCA9IEFubm90YXRlZFRleHRFZGl0LmRlbChyYW5nZSwgaWQpO1xuICAgIH1cbiAgICB0aGlzLmVkaXRzLnB1c2goZWRpdCk7XG4gICAgaWYgKGlkICE9PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gIH07XG4gIFRleHRFZGl0Q2hhbmdlSW1wbDIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGVkaXQpIHtcbiAgICB0aGlzLmVkaXRzLnB1c2goZWRpdCk7XG4gIH07XG4gIFRleHRFZGl0Q2hhbmdlSW1wbDIucHJvdG90eXBlLmFsbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmVkaXRzO1xuICB9O1xuICBUZXh0RWRpdENoYW5nZUltcGwyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZWRpdHMuc3BsaWNlKDAsIHRoaXMuZWRpdHMubGVuZ3RoKTtcbiAgfTtcbiAgVGV4dEVkaXRDaGFuZ2VJbXBsMi5wcm90b3R5cGUuYXNzZXJ0Q2hhbmdlQW5ub3RhdGlvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUZXh0IGVkaXQgY2hhbmdlIGlzIG5vdCBjb25maWd1cmVkIHRvIG1hbmFnZSBjaGFuZ2UgYW5ub3RhdGlvbnMuXCIpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIFRleHRFZGl0Q2hhbmdlSW1wbDI7XG59KCk7XG52YXIgQ2hhbmdlQW5ub3RhdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gQ2hhbmdlQW5ub3RhdGlvbnMyKGFubm90YXRpb25zKSB7XG4gICAgdGhpcy5fYW5ub3RhdGlvbnMgPSBhbm5vdGF0aW9ucyA9PT0gdm9pZCAwID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IGFubm90YXRpb25zO1xuICAgIHRoaXMuX2NvdW50ZXIgPSAwO1xuICAgIHRoaXMuX3NpemUgPSAwO1xuICB9XG4gIENoYW5nZUFubm90YXRpb25zMi5wcm90b3R5cGUuYWxsID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Fubm90YXRpb25zO1xuICB9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2hhbmdlQW5ub3RhdGlvbnMyLnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIENoYW5nZUFubm90YXRpb25zMi5wcm90b3R5cGUubWFuYWdlID0gZnVuY3Rpb24oaWRPckFubm90YXRpb24sIGFubm90YXRpb24pIHtcbiAgICB2YXIgaWQ7XG4gICAgaWYgKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGlkT3JBbm5vdGF0aW9uKSkge1xuICAgICAgaWQgPSBpZE9yQW5ub3RhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWQgPSB0aGlzLm5leHRJZCgpO1xuICAgICAgYW5ub3RhdGlvbiA9IGlkT3JBbm5vdGF0aW9uO1xuICAgIH1cbiAgICBpZiAodGhpcy5fYW5ub3RhdGlvbnNbaWRdICE9PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIklkIFwiICsgaWQgKyBcIiBpcyBhbHJlYWR5IGluIHVzZS5cIik7XG4gICAgfVxuICAgIGlmIChhbm5vdGF0aW9uID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGFubm90YXRpb24gcHJvdmlkZWQgZm9yIGlkIFwiICsgaWQpO1xuICAgIH1cbiAgICB0aGlzLl9hbm5vdGF0aW9uc1tpZF0gPSBhbm5vdGF0aW9uO1xuICAgIHRoaXMuX3NpemUrKztcbiAgICByZXR1cm4gaWQ7XG4gIH07XG4gIENoYW5nZUFubm90YXRpb25zMi5wcm90b3R5cGUubmV4dElkID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY291bnRlcisrO1xuICAgIHJldHVybiB0aGlzLl9jb3VudGVyLnRvU3RyaW5nKCk7XG4gIH07XG4gIHJldHVybiBDaGFuZ2VBbm5vdGF0aW9uczI7XG59KCk7XG52YXIgV29ya3NwYWNlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIFdvcmtzcGFjZUNoYW5nZTIod29ya3NwYWNlRWRpdCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5fdGV4dEVkaXRDaGFuZ2VzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBpZiAod29ya3NwYWNlRWRpdCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0ID0gd29ya3NwYWNlRWRpdDtcbiAgICAgIGlmICh3b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcykge1xuICAgICAgICB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucyA9IG5ldyBDaGFuZ2VBbm5vdGF0aW9ucyh3b3Jrc3BhY2VFZGl0LmNoYW5nZUFubm90YXRpb25zKTtcbiAgICAgICAgd29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyA9IHRoaXMuX2NoYW5nZUFubm90YXRpb25zLmFsbCgpO1xuICAgICAgICB3b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcy5mb3JFYWNoKGZ1bmN0aW9uKGNoYW5nZSkge1xuICAgICAgICAgIGlmIChUZXh0RG9jdW1lbnRFZGl0LmlzKGNoYW5nZSkpIHtcbiAgICAgICAgICAgIHZhciB0ZXh0RWRpdENoYW5nZSA9IG5ldyBUZXh0RWRpdENoYW5nZUltcGwoY2hhbmdlLmVkaXRzLCBfdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMpO1xuICAgICAgICAgICAgX3RoaXMuX3RleHRFZGl0Q2hhbmdlc1tjaGFuZ2UudGV4dERvY3VtZW50LnVyaV0gPSB0ZXh0RWRpdENoYW5nZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh3b3Jrc3BhY2VFZGl0LmNoYW5nZXMpIHtcbiAgICAgICAgT2JqZWN0LmtleXMod29ya3NwYWNlRWRpdC5jaGFuZ2VzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIHZhciB0ZXh0RWRpdENoYW5nZSA9IG5ldyBUZXh0RWRpdENoYW5nZUltcGwod29ya3NwYWNlRWRpdC5jaGFuZ2VzW2tleV0pO1xuICAgICAgICAgIF90aGlzLl90ZXh0RWRpdENoYW5nZXNba2V5XSA9IHRleHRFZGl0Q2hhbmdlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdCA9IHt9O1xuICAgIH1cbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV29ya3NwYWNlQ2hhbmdlMi5wcm90b3R5cGUsIFwiZWRpdFwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuaW5pdERvY3VtZW50Q2hhbmdlcygpO1xuICAgICAgaWYgKHRoaXMuX2NoYW5nZUFubm90YXRpb25zICE9PSB2b2lkIDApIHtcbiAgICAgICAgaWYgKHRoaXMuX2NoYW5nZUFubm90YXRpb25zLnNpemUgPT09IDApIHtcbiAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZUFubm90YXRpb25zID0gdm9pZCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuY2hhbmdlQW5ub3RhdGlvbnMgPSB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucy5hbGwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3dvcmtzcGFjZUVkaXQ7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIFdvcmtzcGFjZUNoYW5nZTIucHJvdG90eXBlLmdldFRleHRFZGl0Q2hhbmdlID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyhrZXkpKSB7XG4gICAgICB0aGlzLmluaXREb2N1bWVudENoYW5nZXMoKTtcbiAgICAgIGlmICh0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIldvcmtzcGFjZSBlZGl0IGlzIG5vdCBjb25maWd1cmVkIGZvciBkb2N1bWVudCBjaGFuZ2VzLlwiKTtcbiAgICAgIH1cbiAgICAgIHZhciB0ZXh0RG9jdW1lbnQgPSB7IHVyaToga2V5LnVyaSwgdmVyc2lvbjoga2V5LnZlcnNpb24gfTtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLl90ZXh0RWRpdENoYW5nZXNbdGV4dERvY3VtZW50LnVyaV07XG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICB2YXIgZWRpdHMgPSBbXTtcbiAgICAgICAgdmFyIHRleHREb2N1bWVudEVkaXQgPSB7XG4gICAgICAgICAgdGV4dERvY3VtZW50LFxuICAgICAgICAgIGVkaXRzXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLnB1c2godGV4dERvY3VtZW50RWRpdCk7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBUZXh0RWRpdENoYW5nZUltcGwoZWRpdHMsIHRoaXMuX2NoYW5nZUFubm90YXRpb25zKTtcbiAgICAgICAgdGhpcy5fdGV4dEVkaXRDaGFuZ2VzW3RleHREb2N1bWVudC51cmldID0gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbml0Q2hhbmdlcygpO1xuICAgICAgaWYgKHRoaXMuX3dvcmtzcGFjZUVkaXQuY2hhbmdlcyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIldvcmtzcGFjZSBlZGl0IGlzIG5vdCBjb25maWd1cmVkIGZvciBub3JtYWwgdGV4dCBlZGl0IGNoYW5nZXMuXCIpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3RleHRFZGl0Q2hhbmdlc1trZXldO1xuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgdmFyIGVkaXRzID0gW107XG4gICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuY2hhbmdlc1trZXldID0gZWRpdHM7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBUZXh0RWRpdENoYW5nZUltcGwoZWRpdHMpO1xuICAgICAgICB0aGlzLl90ZXh0RWRpdENoYW5nZXNba2V5XSA9IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xuICBXb3Jrc3BhY2VDaGFuZ2UyLnByb3RvdHlwZS5pbml0RG9jdW1lbnRDaGFuZ2VzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzID09PSB2b2lkIDAgJiYgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VzID09PSB2b2lkIDApIHtcbiAgICAgIHRoaXMuX2NoYW5nZUFubm90YXRpb25zID0gbmV3IENoYW5nZUFubm90YXRpb25zKCk7XG4gICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcyA9IFtdO1xuICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyA9IHRoaXMuX2NoYW5nZUFubm90YXRpb25zLmFsbCgpO1xuICAgIH1cbiAgfTtcbiAgV29ya3NwYWNlQ2hhbmdlMi5wcm90b3R5cGUuaW5pdENoYW5nZXMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMgPT09IHZvaWQgMCAmJiB0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZXMgPT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gIH07XG4gIFdvcmtzcGFjZUNoYW5nZTIucHJvdG90eXBlLmNyZWF0ZUZpbGUgPSBmdW5jdGlvbih1cmksIG9wdGlvbnNPckFubm90YXRpb24sIG9wdGlvbnMpIHtcbiAgICB0aGlzLmluaXREb2N1bWVudENoYW5nZXMoKTtcbiAgICBpZiAodGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMgPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV29ya3NwYWNlIGVkaXQgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIGRvY3VtZW50IGNoYW5nZXMuXCIpO1xuICAgIH1cbiAgICB2YXIgYW5ub3RhdGlvbjtcbiAgICBpZiAoQ2hhbmdlQW5ub3RhdGlvbi5pcyhvcHRpb25zT3JBbm5vdGF0aW9uKSB8fCBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhvcHRpb25zT3JBbm5vdGF0aW9uKSkge1xuICAgICAgYW5ub3RhdGlvbiA9IG9wdGlvbnNPckFubm90YXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zT3JBbm5vdGF0aW9uO1xuICAgIH1cbiAgICB2YXIgb3BlcmF0aW9uO1xuICAgIHZhciBpZDtcbiAgICBpZiAoYW5ub3RhdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBvcGVyYXRpb24gPSBDcmVhdGVGaWxlLmNyZWF0ZSh1cmksIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZCA9IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGFubm90YXRpb24pID8gYW5ub3RhdGlvbiA6IHRoaXMuX2NoYW5nZUFubm90YXRpb25zLm1hbmFnZShhbm5vdGF0aW9uKTtcbiAgICAgIG9wZXJhdGlvbiA9IENyZWF0ZUZpbGUuY3JlYXRlKHVyaSwgb3B0aW9ucywgaWQpO1xuICAgIH1cbiAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcy5wdXNoKG9wZXJhdGlvbik7XG4gICAgaWYgKGlkICE9PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gIH07XG4gIFdvcmtzcGFjZUNoYW5nZTIucHJvdG90eXBlLnJlbmFtZUZpbGUgPSBmdW5jdGlvbihvbGRVcmksIG5ld1VyaSwgb3B0aW9uc09yQW5ub3RhdGlvbiwgb3B0aW9ucykge1xuICAgIHRoaXMuaW5pdERvY3VtZW50Q2hhbmdlcygpO1xuICAgIGlmICh0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXb3Jrc3BhY2UgZWRpdCBpcyBub3QgY29uZmlndXJlZCBmb3IgZG9jdW1lbnQgY2hhbmdlcy5cIik7XG4gICAgfVxuICAgIHZhciBhbm5vdGF0aW9uO1xuICAgIGlmIChDaGFuZ2VBbm5vdGF0aW9uLmlzKG9wdGlvbnNPckFubm90YXRpb24pIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKG9wdGlvbnNPckFubm90YXRpb24pKSB7XG4gICAgICBhbm5vdGF0aW9uID0gb3B0aW9uc09yQW5ub3RhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnNPckFubm90YXRpb247XG4gICAgfVxuICAgIHZhciBvcGVyYXRpb247XG4gICAgdmFyIGlkO1xuICAgIGlmIChhbm5vdGF0aW9uID09PSB2b2lkIDApIHtcbiAgICAgIG9wZXJhdGlvbiA9IFJlbmFtZUZpbGUuY3JlYXRlKG9sZFVyaSwgbmV3VXJpLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWQgPSBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhhbm5vdGF0aW9uKSA/IGFubm90YXRpb24gOiB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucy5tYW5hZ2UoYW5ub3RhdGlvbik7XG4gICAgICBvcGVyYXRpb24gPSBSZW5hbWVGaWxlLmNyZWF0ZShvbGRVcmksIG5ld1VyaSwgb3B0aW9ucywgaWQpO1xuICAgIH1cbiAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcy5wdXNoKG9wZXJhdGlvbik7XG4gICAgaWYgKGlkICE9PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gIH07XG4gIFdvcmtzcGFjZUNoYW5nZTIucHJvdG90eXBlLmRlbGV0ZUZpbGUgPSBmdW5jdGlvbih1cmksIG9wdGlvbnNPckFubm90YXRpb24sIG9wdGlvbnMpIHtcbiAgICB0aGlzLmluaXREb2N1bWVudENoYW5nZXMoKTtcbiAgICBpZiAodGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMgPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV29ya3NwYWNlIGVkaXQgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIGRvY3VtZW50IGNoYW5nZXMuXCIpO1xuICAgIH1cbiAgICB2YXIgYW5ub3RhdGlvbjtcbiAgICBpZiAoQ2hhbmdlQW5ub3RhdGlvbi5pcyhvcHRpb25zT3JBbm5vdGF0aW9uKSB8fCBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhvcHRpb25zT3JBbm5vdGF0aW9uKSkge1xuICAgICAgYW5ub3RhdGlvbiA9IG9wdGlvbnNPckFubm90YXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zT3JBbm5vdGF0aW9uO1xuICAgIH1cbiAgICB2YXIgb3BlcmF0aW9uO1xuICAgIHZhciBpZDtcbiAgICBpZiAoYW5ub3RhdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBvcGVyYXRpb24gPSBEZWxldGVGaWxlLmNyZWF0ZSh1cmksIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZCA9IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGFubm90YXRpb24pID8gYW5ub3RhdGlvbiA6IHRoaXMuX2NoYW5nZUFubm90YXRpb25zLm1hbmFnZShhbm5vdGF0aW9uKTtcbiAgICAgIG9wZXJhdGlvbiA9IERlbGV0ZUZpbGUuY3JlYXRlKHVyaSwgb3B0aW9ucywgaWQpO1xuICAgIH1cbiAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcy5wdXNoKG9wZXJhdGlvbik7XG4gICAgaWYgKGlkICE9PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gIH07XG4gIHJldHVybiBXb3Jrc3BhY2VDaGFuZ2UyO1xufSgpO1xudmFyIFRleHREb2N1bWVudElkZW50aWZpZXI7XG4oZnVuY3Rpb24oVGV4dERvY3VtZW50SWRlbnRpZmllcjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHVyaSkge1xuICAgIHJldHVybiB7IHVyaSB9O1xuICB9XG4gIFRleHREb2N1bWVudElkZW50aWZpZXIyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSk7XG4gIH1cbiAgVGV4dERvY3VtZW50SWRlbnRpZmllcjIuaXMgPSBpcztcbn0pKFRleHREb2N1bWVudElkZW50aWZpZXIgfHwgKFRleHREb2N1bWVudElkZW50aWZpZXIgPSB7fSkpO1xudmFyIFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXI7XG4oZnVuY3Rpb24oVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgdmVyc2lvbikge1xuICAgIHJldHVybiB7IHVyaSwgdmVyc2lvbiB9O1xuICB9XG4gIFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgSXMuaW50ZWdlcihjYW5kaWRhdGUudmVyc2lvbik7XG4gIH1cbiAgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjIuaXMgPSBpcztcbn0pKFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgfHwgKFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgPSB7fSkpO1xudmFyIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjtcbihmdW5jdGlvbihPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIHZlcnNpb24pIHtcbiAgICByZXR1cm4geyB1cmksIHZlcnNpb24gfTtcbiAgfVxuICBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgKGNhbmRpZGF0ZS52ZXJzaW9uID09PSBudWxsIHx8IElzLmludGVnZXIoY2FuZGlkYXRlLnZlcnNpb24pKTtcbiAgfVxuICBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyLmlzID0gaXM7XG59KShPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgfHwgKE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciA9IHt9KSk7XG52YXIgVGV4dERvY3VtZW50SXRlbTtcbihmdW5jdGlvbihUZXh0RG9jdW1lbnRJdGVtMikge1xuICBmdW5jdGlvbiBjcmVhdGUodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCB0ZXh0KSB7XG4gICAgcmV0dXJuIHsgdXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCB0ZXh0IH07XG4gIH1cbiAgVGV4dERvY3VtZW50SXRlbTIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlSWQpICYmIElzLmludGVnZXIoY2FuZGlkYXRlLnZlcnNpb24pICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGV4dCk7XG4gIH1cbiAgVGV4dERvY3VtZW50SXRlbTIuaXMgPSBpcztcbn0pKFRleHREb2N1bWVudEl0ZW0gfHwgKFRleHREb2N1bWVudEl0ZW0gPSB7fSkpO1xudmFyIE1hcmt1cEtpbmQ7XG4oZnVuY3Rpb24oTWFya3VwS2luZDIpIHtcbiAgTWFya3VwS2luZDIuUGxhaW5UZXh0ID0gXCJwbGFpbnRleHRcIjtcbiAgTWFya3VwS2luZDIuTWFya2Rvd24gPSBcIm1hcmtkb3duXCI7XG59KShNYXJrdXBLaW5kIHx8IChNYXJrdXBLaW5kID0ge30pKTtcbihmdW5jdGlvbihNYXJrdXBLaW5kMikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlID09PSBNYXJrdXBLaW5kMi5QbGFpblRleHQgfHwgY2FuZGlkYXRlID09PSBNYXJrdXBLaW5kMi5NYXJrZG93bjtcbiAgfVxuICBNYXJrdXBLaW5kMi5pcyA9IGlzO1xufSkoTWFya3VwS2luZCB8fCAoTWFya3VwS2luZCA9IHt9KSk7XG52YXIgTWFya3VwQ29udGVudDtcbihmdW5jdGlvbihNYXJrdXBDb250ZW50Mikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbCh2YWx1ZSkgJiYgTWFya3VwS2luZC5pcyhjYW5kaWRhdGUua2luZCkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS52YWx1ZSk7XG4gIH1cbiAgTWFya3VwQ29udGVudDIuaXMgPSBpcztcbn0pKE1hcmt1cENvbnRlbnQgfHwgKE1hcmt1cENvbnRlbnQgPSB7fSkpO1xudmFyIENvbXBsZXRpb25JdGVtS2luZDtcbihmdW5jdGlvbihDb21wbGV0aW9uSXRlbUtpbmQyKSB7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuVGV4dCA9IDE7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuTWV0aG9kID0gMjtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5GdW5jdGlvbiA9IDM7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuQ29uc3RydWN0b3IgPSA0O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkZpZWxkID0gNTtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5WYXJpYWJsZSA9IDY7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuQ2xhc3MgPSA3O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkludGVyZmFjZSA9IDg7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuTW9kdWxlID0gOTtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5Qcm9wZXJ0eSA9IDEwO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlVuaXQgPSAxMTtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5WYWx1ZSA9IDEyO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkVudW0gPSAxMztcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5LZXl3b3JkID0gMTQ7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuU25pcHBldCA9IDE1O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkNvbG9yID0gMTY7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuRmlsZSA9IDE3O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlJlZmVyZW5jZSA9IDE4O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkZvbGRlciA9IDE5O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkVudW1NZW1iZXIgPSAyMDtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5Db25zdGFudCA9IDIxO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlN0cnVjdCA9IDIyO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkV2ZW50ID0gMjM7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuT3BlcmF0b3IgPSAyNDtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5UeXBlUGFyYW1ldGVyID0gMjU7XG59KShDb21wbGV0aW9uSXRlbUtpbmQgfHwgKENvbXBsZXRpb25JdGVtS2luZCA9IHt9KSk7XG52YXIgSW5zZXJ0VGV4dEZvcm1hdDtcbihmdW5jdGlvbihJbnNlcnRUZXh0Rm9ybWF0Mikge1xuICBJbnNlcnRUZXh0Rm9ybWF0Mi5QbGFpblRleHQgPSAxO1xuICBJbnNlcnRUZXh0Rm9ybWF0Mi5TbmlwcGV0ID0gMjtcbn0pKEluc2VydFRleHRGb3JtYXQgfHwgKEluc2VydFRleHRGb3JtYXQgPSB7fSkpO1xudmFyIENvbXBsZXRpb25JdGVtVGFnO1xuKGZ1bmN0aW9uKENvbXBsZXRpb25JdGVtVGFnMikge1xuICBDb21wbGV0aW9uSXRlbVRhZzIuRGVwcmVjYXRlZCA9IDE7XG59KShDb21wbGV0aW9uSXRlbVRhZyB8fCAoQ29tcGxldGlvbkl0ZW1UYWcgPSB7fSkpO1xudmFyIEluc2VydFJlcGxhY2VFZGl0O1xuKGZ1bmN0aW9uKEluc2VydFJlcGxhY2VFZGl0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUobmV3VGV4dCwgaW5zZXJ0LCByZXBsYWNlKSB7XG4gICAgcmV0dXJuIHsgbmV3VGV4dCwgaW5zZXJ0LCByZXBsYWNlIH07XG4gIH1cbiAgSW5zZXJ0UmVwbGFjZUVkaXQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm5ld1RleHQpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5pbnNlcnQpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yZXBsYWNlKTtcbiAgfVxuICBJbnNlcnRSZXBsYWNlRWRpdDIuaXMgPSBpcztcbn0pKEluc2VydFJlcGxhY2VFZGl0IHx8IChJbnNlcnRSZXBsYWNlRWRpdCA9IHt9KSk7XG52YXIgSW5zZXJ0VGV4dE1vZGU7XG4oZnVuY3Rpb24oSW5zZXJ0VGV4dE1vZGUyKSB7XG4gIEluc2VydFRleHRNb2RlMi5hc0lzID0gMTtcbiAgSW5zZXJ0VGV4dE1vZGUyLmFkanVzdEluZGVudGF0aW9uID0gMjtcbn0pKEluc2VydFRleHRNb2RlIHx8IChJbnNlcnRUZXh0TW9kZSA9IHt9KSk7XG52YXIgQ29tcGxldGlvbkl0ZW07XG4oZnVuY3Rpb24oQ29tcGxldGlvbkl0ZW0yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCkge1xuICAgIHJldHVybiB7IGxhYmVsIH07XG4gIH1cbiAgQ29tcGxldGlvbkl0ZW0yLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKENvbXBsZXRpb25JdGVtIHx8IChDb21wbGV0aW9uSXRlbSA9IHt9KSk7XG52YXIgQ29tcGxldGlvbkxpc3Q7XG4oZnVuY3Rpb24oQ29tcGxldGlvbkxpc3QyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShpdGVtcywgaXNJbmNvbXBsZXRlKSB7XG4gICAgcmV0dXJuIHsgaXRlbXM6IGl0ZW1zID8gaXRlbXMgOiBbXSwgaXNJbmNvbXBsZXRlOiAhIWlzSW5jb21wbGV0ZSB9O1xuICB9XG4gIENvbXBsZXRpb25MaXN0Mi5jcmVhdGUgPSBjcmVhdGU7XG59KShDb21wbGV0aW9uTGlzdCB8fCAoQ29tcGxldGlvbkxpc3QgPSB7fSkpO1xudmFyIE1hcmtlZFN0cmluZztcbihmdW5jdGlvbihNYXJrZWRTdHJpbmcyKSB7XG4gIGZ1bmN0aW9uIGZyb21QbGFpblRleHQocGxhaW5UZXh0KSB7XG4gICAgcmV0dXJuIHBsYWluVGV4dC5yZXBsYWNlKC9bXFxcXGAqX3t9W1xcXSgpIytcXC0uIV0vZywgXCJcXFxcJCZcIik7XG4gIH1cbiAgTWFya2VkU3RyaW5nMi5mcm9tUGxhaW5UZXh0ID0gZnJvbVBsYWluVGV4dDtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLnN0cmluZyhjYW5kaWRhdGUpIHx8IElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnZhbHVlKTtcbiAgfVxuICBNYXJrZWRTdHJpbmcyLmlzID0gaXM7XG59KShNYXJrZWRTdHJpbmcgfHwgKE1hcmtlZFN0cmluZyA9IHt9KSk7XG52YXIgSG92ZXI7XG4oZnVuY3Rpb24oSG92ZXIyKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiAhIWNhbmRpZGF0ZSAmJiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgKE1hcmt1cENvbnRlbnQuaXMoY2FuZGlkYXRlLmNvbnRlbnRzKSB8fCBNYXJrZWRTdHJpbmcuaXMoY2FuZGlkYXRlLmNvbnRlbnRzKSB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5jb250ZW50cywgTWFya2VkU3RyaW5nLmlzKSkgJiYgKHZhbHVlLnJhbmdlID09PSB2b2lkIDAgfHwgUmFuZ2UuaXModmFsdWUucmFuZ2UpKTtcbiAgfVxuICBIb3ZlcjIuaXMgPSBpcztcbn0pKEhvdmVyIHx8IChIb3ZlciA9IHt9KSk7XG52YXIgUGFyYW1ldGVySW5mb3JtYXRpb247XG4oZnVuY3Rpb24oUGFyYW1ldGVySW5mb3JtYXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCwgZG9jdW1lbnRhdGlvbikge1xuICAgIHJldHVybiBkb2N1bWVudGF0aW9uID8geyBsYWJlbCwgZG9jdW1lbnRhdGlvbiB9IDogeyBsYWJlbCB9O1xuICB9XG4gIFBhcmFtZXRlckluZm9ybWF0aW9uMi5jcmVhdGUgPSBjcmVhdGU7XG59KShQYXJhbWV0ZXJJbmZvcm1hdGlvbiB8fCAoUGFyYW1ldGVySW5mb3JtYXRpb24gPSB7fSkpO1xudmFyIFNpZ25hdHVyZUluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uKFNpZ25hdHVyZUluZm9ybWF0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUobGFiZWwsIGRvY3VtZW50YXRpb24pIHtcbiAgICB2YXIgcGFyYW1ldGVycyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICBwYXJhbWV0ZXJzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0geyBsYWJlbCB9O1xuICAgIGlmIChJcy5kZWZpbmVkKGRvY3VtZW50YXRpb24pKSB7XG4gICAgICByZXN1bHQuZG9jdW1lbnRhdGlvbiA9IGRvY3VtZW50YXRpb247XG4gICAgfVxuICAgIGlmIChJcy5kZWZpbmVkKHBhcmFtZXRlcnMpKSB7XG4gICAgICByZXN1bHQucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXJhbWV0ZXJzID0gW107XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgU2lnbmF0dXJlSW5mb3JtYXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKFNpZ25hdHVyZUluZm9ybWF0aW9uIHx8IChTaWduYXR1cmVJbmZvcm1hdGlvbiA9IHt9KSk7XG52YXIgRG9jdW1lbnRIaWdobGlnaHRLaW5kO1xuKGZ1bmN0aW9uKERvY3VtZW50SGlnaGxpZ2h0S2luZDIpIHtcbiAgRG9jdW1lbnRIaWdobGlnaHRLaW5kMi5UZXh0ID0gMTtcbiAgRG9jdW1lbnRIaWdobGlnaHRLaW5kMi5SZWFkID0gMjtcbiAgRG9jdW1lbnRIaWdobGlnaHRLaW5kMi5Xcml0ZSA9IDM7XG59KShEb2N1bWVudEhpZ2hsaWdodEtpbmQgfHwgKERvY3VtZW50SGlnaGxpZ2h0S2luZCA9IHt9KSk7XG52YXIgRG9jdW1lbnRIaWdobGlnaHQ7XG4oZnVuY3Rpb24oRG9jdW1lbnRIaWdobGlnaHQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwga2luZCkge1xuICAgIHZhciByZXN1bHQgPSB7IHJhbmdlIH07XG4gICAgaWYgKElzLm51bWJlcihraW5kKSkge1xuICAgICAgcmVzdWx0LmtpbmQgPSBraW5kO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIERvY3VtZW50SGlnaGxpZ2h0Mi5jcmVhdGUgPSBjcmVhdGU7XG59KShEb2N1bWVudEhpZ2hsaWdodCB8fCAoRG9jdW1lbnRIaWdobGlnaHQgPSB7fSkpO1xudmFyIFN5bWJvbEtpbmQ7XG4oZnVuY3Rpb24oU3ltYm9sS2luZDIpIHtcbiAgU3ltYm9sS2luZDIuRmlsZSA9IDE7XG4gIFN5bWJvbEtpbmQyLk1vZHVsZSA9IDI7XG4gIFN5bWJvbEtpbmQyLk5hbWVzcGFjZSA9IDM7XG4gIFN5bWJvbEtpbmQyLlBhY2thZ2UgPSA0O1xuICBTeW1ib2xLaW5kMi5DbGFzcyA9IDU7XG4gIFN5bWJvbEtpbmQyLk1ldGhvZCA9IDY7XG4gIFN5bWJvbEtpbmQyLlByb3BlcnR5ID0gNztcbiAgU3ltYm9sS2luZDIuRmllbGQgPSA4O1xuICBTeW1ib2xLaW5kMi5Db25zdHJ1Y3RvciA9IDk7XG4gIFN5bWJvbEtpbmQyLkVudW0gPSAxMDtcbiAgU3ltYm9sS2luZDIuSW50ZXJmYWNlID0gMTE7XG4gIFN5bWJvbEtpbmQyLkZ1bmN0aW9uID0gMTI7XG4gIFN5bWJvbEtpbmQyLlZhcmlhYmxlID0gMTM7XG4gIFN5bWJvbEtpbmQyLkNvbnN0YW50ID0gMTQ7XG4gIFN5bWJvbEtpbmQyLlN0cmluZyA9IDE1O1xuICBTeW1ib2xLaW5kMi5OdW1iZXIgPSAxNjtcbiAgU3ltYm9sS2luZDIuQm9vbGVhbiA9IDE3O1xuICBTeW1ib2xLaW5kMi5BcnJheSA9IDE4O1xuICBTeW1ib2xLaW5kMi5PYmplY3QgPSAxOTtcbiAgU3ltYm9sS2luZDIuS2V5ID0gMjA7XG4gIFN5bWJvbEtpbmQyLk51bGwgPSAyMTtcbiAgU3ltYm9sS2luZDIuRW51bU1lbWJlciA9IDIyO1xuICBTeW1ib2xLaW5kMi5TdHJ1Y3QgPSAyMztcbiAgU3ltYm9sS2luZDIuRXZlbnQgPSAyNDtcbiAgU3ltYm9sS2luZDIuT3BlcmF0b3IgPSAyNTtcbiAgU3ltYm9sS2luZDIuVHlwZVBhcmFtZXRlciA9IDI2O1xufSkoU3ltYm9sS2luZCB8fCAoU3ltYm9sS2luZCA9IHt9KSk7XG52YXIgU3ltYm9sVGFnO1xuKGZ1bmN0aW9uKFN5bWJvbFRhZzIpIHtcbiAgU3ltYm9sVGFnMi5EZXByZWNhdGVkID0gMTtcbn0pKFN5bWJvbFRhZyB8fCAoU3ltYm9sVGFnID0ge30pKTtcbnZhciBTeW1ib2xJbmZvcm1hdGlvbjtcbihmdW5jdGlvbihTeW1ib2xJbmZvcm1hdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKG5hbWUsIGtpbmQsIHJhbmdlLCB1cmksIGNvbnRhaW5lck5hbWUpIHtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgbmFtZSxcbiAgICAgIGtpbmQsXG4gICAgICBsb2NhdGlvbjogeyB1cmksIHJhbmdlIH1cbiAgICB9O1xuICAgIGlmIChjb250YWluZXJOYW1lKSB7XG4gICAgICByZXN1bHQuY29udGFpbmVyTmFtZSA9IGNvbnRhaW5lck5hbWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgU3ltYm9sSW5mb3JtYXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKFN5bWJvbEluZm9ybWF0aW9uIHx8IChTeW1ib2xJbmZvcm1hdGlvbiA9IHt9KSk7XG52YXIgRG9jdW1lbnRTeW1ib2w7XG4oZnVuY3Rpb24oRG9jdW1lbnRTeW1ib2wyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCBkZXRhaWwsIGtpbmQsIHJhbmdlLCBzZWxlY3Rpb25SYW5nZSwgY2hpbGRyZW4pIHtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgbmFtZSxcbiAgICAgIGRldGFpbCxcbiAgICAgIGtpbmQsXG4gICAgICByYW5nZSxcbiAgICAgIHNlbGVjdGlvblJhbmdlXG4gICAgfTtcbiAgICBpZiAoY2hpbGRyZW4gIT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0LmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgRG9jdW1lbnRTeW1ib2wyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm5hbWUpICYmIElzLm51bWJlcihjYW5kaWRhdGUua2luZCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUuc2VsZWN0aW9uUmFuZ2UpICYmIChjYW5kaWRhdGUuZGV0YWlsID09PSB2b2lkIDAgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5kZXRhaWwpKSAmJiAoY2FuZGlkYXRlLmRlcHJlY2F0ZWQgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5kZXByZWNhdGVkKSkgJiYgKGNhbmRpZGF0ZS5jaGlsZHJlbiA9PT0gdm9pZCAwIHx8IEFycmF5LmlzQXJyYXkoY2FuZGlkYXRlLmNoaWxkcmVuKSkgJiYgKGNhbmRpZGF0ZS50YWdzID09PSB2b2lkIDAgfHwgQXJyYXkuaXNBcnJheShjYW5kaWRhdGUudGFncykpO1xuICB9XG4gIERvY3VtZW50U3ltYm9sMi5pcyA9IGlzO1xufSkoRG9jdW1lbnRTeW1ib2wgfHwgKERvY3VtZW50U3ltYm9sID0ge30pKTtcbnZhciBDb2RlQWN0aW9uS2luZDtcbihmdW5jdGlvbihDb2RlQWN0aW9uS2luZDIpIHtcbiAgQ29kZUFjdGlvbktpbmQyLkVtcHR5ID0gXCJcIjtcbiAgQ29kZUFjdGlvbktpbmQyLlF1aWNrRml4ID0gXCJxdWlja2ZpeFwiO1xuICBDb2RlQWN0aW9uS2luZDIuUmVmYWN0b3IgPSBcInJlZmFjdG9yXCI7XG4gIENvZGVBY3Rpb25LaW5kMi5SZWZhY3RvckV4dHJhY3QgPSBcInJlZmFjdG9yLmV4dHJhY3RcIjtcbiAgQ29kZUFjdGlvbktpbmQyLlJlZmFjdG9ySW5saW5lID0gXCJyZWZhY3Rvci5pbmxpbmVcIjtcbiAgQ29kZUFjdGlvbktpbmQyLlJlZmFjdG9yUmV3cml0ZSA9IFwicmVmYWN0b3IucmV3cml0ZVwiO1xuICBDb2RlQWN0aW9uS2luZDIuU291cmNlID0gXCJzb3VyY2VcIjtcbiAgQ29kZUFjdGlvbktpbmQyLlNvdXJjZU9yZ2FuaXplSW1wb3J0cyA9IFwic291cmNlLm9yZ2FuaXplSW1wb3J0c1wiO1xuICBDb2RlQWN0aW9uS2luZDIuU291cmNlRml4QWxsID0gXCJzb3VyY2UuZml4QWxsXCI7XG59KShDb2RlQWN0aW9uS2luZCB8fCAoQ29kZUFjdGlvbktpbmQgPSB7fSkpO1xudmFyIENvZGVBY3Rpb25Db250ZXh0O1xuKGZ1bmN0aW9uKENvZGVBY3Rpb25Db250ZXh0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUoZGlhZ25vc3RpY3MsIG9ubHkpIHtcbiAgICB2YXIgcmVzdWx0ID0geyBkaWFnbm9zdGljcyB9O1xuICAgIGlmIChvbmx5ICE9PSB2b2lkIDAgJiYgb25seSAhPT0gbnVsbCkge1xuICAgICAgcmVzdWx0Lm9ubHkgPSBvbmx5O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIENvZGVBY3Rpb25Db250ZXh0Mi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMudHlwZWRBcnJheShjYW5kaWRhdGUuZGlhZ25vc3RpY3MsIERpYWdub3N0aWMuaXMpICYmIChjYW5kaWRhdGUub25seSA9PT0gdm9pZCAwIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLm9ubHksIElzLnN0cmluZykpO1xuICB9XG4gIENvZGVBY3Rpb25Db250ZXh0Mi5pcyA9IGlzO1xufSkoQ29kZUFjdGlvbkNvbnRleHQgfHwgKENvZGVBY3Rpb25Db250ZXh0ID0ge30pKTtcbnZhciBDb2RlQWN0aW9uO1xuKGZ1bmN0aW9uKENvZGVBY3Rpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh0aXRsZSwga2luZE9yQ29tbWFuZE9yRWRpdCwga2luZCkge1xuICAgIHZhciByZXN1bHQgPSB7IHRpdGxlIH07XG4gICAgdmFyIGNoZWNrS2luZCA9IHRydWU7XG4gICAgaWYgKHR5cGVvZiBraW5kT3JDb21tYW5kT3JFZGl0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjaGVja0tpbmQgPSBmYWxzZTtcbiAgICAgIHJlc3VsdC5raW5kID0ga2luZE9yQ29tbWFuZE9yRWRpdDtcbiAgICB9IGVsc2UgaWYgKENvbW1hbmQuaXMoa2luZE9yQ29tbWFuZE9yRWRpdCkpIHtcbiAgICAgIHJlc3VsdC5jb21tYW5kID0ga2luZE9yQ29tbWFuZE9yRWRpdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LmVkaXQgPSBraW5kT3JDb21tYW5kT3JFZGl0O1xuICAgIH1cbiAgICBpZiAoY2hlY2tLaW5kICYmIGtpbmQgIT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0LmtpbmQgPSBraW5kO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIENvZGVBY3Rpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRpdGxlKSAmJiAoY2FuZGlkYXRlLmRpYWdub3N0aWNzID09PSB2b2lkIDAgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUuZGlhZ25vc3RpY3MsIERpYWdub3N0aWMuaXMpKSAmJiAoY2FuZGlkYXRlLmtpbmQgPT09IHZvaWQgMCB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmtpbmQpKSAmJiAoY2FuZGlkYXRlLmVkaXQgIT09IHZvaWQgMCB8fCBjYW5kaWRhdGUuY29tbWFuZCAhPT0gdm9pZCAwKSAmJiAoY2FuZGlkYXRlLmNvbW1hbmQgPT09IHZvaWQgMCB8fCBDb21tYW5kLmlzKGNhbmRpZGF0ZS5jb21tYW5kKSkgJiYgKGNhbmRpZGF0ZS5pc1ByZWZlcnJlZCA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLmlzUHJlZmVycmVkKSkgJiYgKGNhbmRpZGF0ZS5lZGl0ID09PSB2b2lkIDAgfHwgV29ya3NwYWNlRWRpdC5pcyhjYW5kaWRhdGUuZWRpdCkpO1xuICB9XG4gIENvZGVBY3Rpb24yLmlzID0gaXM7XG59KShDb2RlQWN0aW9uIHx8IChDb2RlQWN0aW9uID0ge30pKTtcbnZhciBDb2RlTGVucztcbihmdW5jdGlvbihDb2RlTGVuczIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBkYXRhKSB7XG4gICAgdmFyIHJlc3VsdCA9IHsgcmFuZ2UgfTtcbiAgICBpZiAoSXMuZGVmaW5lZChkYXRhKSkge1xuICAgICAgcmVzdWx0LmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIENvZGVMZW5zMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5jb21tYW5kKSB8fCBDb21tYW5kLmlzKGNhbmRpZGF0ZS5jb21tYW5kKSk7XG4gIH1cbiAgQ29kZUxlbnMyLmlzID0gaXM7XG59KShDb2RlTGVucyB8fCAoQ29kZUxlbnMgPSB7fSkpO1xudmFyIEZvcm1hdHRpbmdPcHRpb25zO1xuKGZ1bmN0aW9uKEZvcm1hdHRpbmdPcHRpb25zMikge1xuICBmdW5jdGlvbiBjcmVhdGUodGFiU2l6ZSwgaW5zZXJ0U3BhY2VzKSB7XG4gICAgcmV0dXJuIHsgdGFiU2l6ZSwgaW5zZXJ0U3BhY2VzIH07XG4gIH1cbiAgRm9ybWF0dGluZ09wdGlvbnMyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUudGFiU2l6ZSkgJiYgSXMuYm9vbGVhbihjYW5kaWRhdGUuaW5zZXJ0U3BhY2VzKTtcbiAgfVxuICBGb3JtYXR0aW5nT3B0aW9uczIuaXMgPSBpcztcbn0pKEZvcm1hdHRpbmdPcHRpb25zIHx8IChGb3JtYXR0aW5nT3B0aW9ucyA9IHt9KSk7XG52YXIgRG9jdW1lbnRMaW5rO1xuKGZ1bmN0aW9uKERvY3VtZW50TGluazIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCB0YXJnZXQsIGRhdGEpIHtcbiAgICByZXR1cm4geyByYW5nZSwgdGFyZ2V0LCBkYXRhIH07XG4gIH1cbiAgRG9jdW1lbnRMaW5rMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS50YXJnZXQpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUudGFyZ2V0KSk7XG4gIH1cbiAgRG9jdW1lbnRMaW5rMi5pcyA9IGlzO1xufSkoRG9jdW1lbnRMaW5rIHx8IChEb2N1bWVudExpbmsgPSB7fSkpO1xudmFyIFNlbGVjdGlvblJhbmdlO1xuKGZ1bmN0aW9uKFNlbGVjdGlvblJhbmdlMikge1xuICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIHBhcmVudCkge1xuICAgIHJldHVybiB7IHJhbmdlLCBwYXJlbnQgfTtcbiAgfVxuICBTZWxlY3Rpb25SYW5nZTIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICE9PSB2b2lkIDAgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiAoY2FuZGlkYXRlLnBhcmVudCA9PT0gdm9pZCAwIHx8IFNlbGVjdGlvblJhbmdlMi5pcyhjYW5kaWRhdGUucGFyZW50KSk7XG4gIH1cbiAgU2VsZWN0aW9uUmFuZ2UyLmlzID0gaXM7XG59KShTZWxlY3Rpb25SYW5nZSB8fCAoU2VsZWN0aW9uUmFuZ2UgPSB7fSkpO1xudmFyIFRleHREb2N1bWVudDtcbihmdW5jdGlvbihUZXh0RG9jdW1lbnQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIGNvbnRlbnQpIHtcbiAgICByZXR1cm4gbmV3IEZ1bGxUZXh0RG9jdW1lbnQodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KTtcbiAgfVxuICBUZXh0RG9jdW1lbnQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUubGFuZ3VhZ2VJZCkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYW5ndWFnZUlkKSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLmxpbmVDb3VudCkgJiYgSXMuZnVuYyhjYW5kaWRhdGUuZ2V0VGV4dCkgJiYgSXMuZnVuYyhjYW5kaWRhdGUucG9zaXRpb25BdCkgJiYgSXMuZnVuYyhjYW5kaWRhdGUub2Zmc2V0QXQpID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG4gIFRleHREb2N1bWVudDIuaXMgPSBpcztcbiAgZnVuY3Rpb24gYXBwbHlFZGl0cyhkb2N1bWVudCwgZWRpdHMpIHtcbiAgICB2YXIgdGV4dCA9IGRvY3VtZW50LmdldFRleHQoKTtcbiAgICB2YXIgc29ydGVkRWRpdHMgPSBtZXJnZVNvcnQoZWRpdHMsIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHZhciBkaWZmID0gYS5yYW5nZS5zdGFydC5saW5lIC0gYi5yYW5nZS5zdGFydC5saW5lO1xuICAgICAgaWYgKGRpZmYgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGEucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyIC0gYi5yYW5nZS5zdGFydC5jaGFyYWN0ZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGlmZjtcbiAgICB9KTtcbiAgICB2YXIgbGFzdE1vZGlmaWVkT2Zmc2V0ID0gdGV4dC5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IHNvcnRlZEVkaXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZSA9IHNvcnRlZEVkaXRzW2ldO1xuICAgICAgdmFyIHN0YXJ0T2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQoZS5yYW5nZS5zdGFydCk7XG4gICAgICB2YXIgZW5kT2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQoZS5yYW5nZS5lbmQpO1xuICAgICAgaWYgKGVuZE9mZnNldCA8PSBsYXN0TW9kaWZpZWRPZmZzZXQpIHtcbiAgICAgICAgdGV4dCA9IHRleHQuc3Vic3RyaW5nKDAsIHN0YXJ0T2Zmc2V0KSArIGUubmV3VGV4dCArIHRleHQuc3Vic3RyaW5nKGVuZE9mZnNldCwgdGV4dC5sZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3ZlcmxhcHBpbmcgZWRpdFwiKTtcbiAgICAgIH1cbiAgICAgIGxhc3RNb2RpZmllZE9mZnNldCA9IHN0YXJ0T2Zmc2V0O1xuICAgIH1cbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuICBUZXh0RG9jdW1lbnQyLmFwcGx5RWRpdHMgPSBhcHBseUVkaXRzO1xuICBmdW5jdGlvbiBtZXJnZVNvcnQoZGF0YSwgY29tcGFyZSkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA8PSAxKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgdmFyIHAgPSBkYXRhLmxlbmd0aCAvIDIgfCAwO1xuICAgIHZhciBsZWZ0ID0gZGF0YS5zbGljZSgwLCBwKTtcbiAgICB2YXIgcmlnaHQgPSBkYXRhLnNsaWNlKHApO1xuICAgIG1lcmdlU29ydChsZWZ0LCBjb21wYXJlKTtcbiAgICBtZXJnZVNvcnQocmlnaHQsIGNvbXBhcmUpO1xuICAgIHZhciBsZWZ0SWR4ID0gMDtcbiAgICB2YXIgcmlnaHRJZHggPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVmdElkeCA8IGxlZnQubGVuZ3RoICYmIHJpZ2h0SWR4IDwgcmlnaHQubGVuZ3RoKSB7XG4gICAgICB2YXIgcmV0ID0gY29tcGFyZShsZWZ0W2xlZnRJZHhdLCByaWdodFtyaWdodElkeF0pO1xuICAgICAgaWYgKHJldCA8PSAwKSB7XG4gICAgICAgIGRhdGFbaSsrXSA9IGxlZnRbbGVmdElkeCsrXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFbaSsrXSA9IHJpZ2h0W3JpZ2h0SWR4KytdO1xuICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAobGVmdElkeCA8IGxlZnQubGVuZ3RoKSB7XG4gICAgICBkYXRhW2krK10gPSBsZWZ0W2xlZnRJZHgrK107XG4gICAgfVxuICAgIHdoaWxlIChyaWdodElkeCA8IHJpZ2h0Lmxlbmd0aCkge1xuICAgICAgZGF0YVtpKytdID0gcmlnaHRbcmlnaHRJZHgrK107XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XG59KShUZXh0RG9jdW1lbnQgfHwgKFRleHREb2N1bWVudCA9IHt9KSk7XG52YXIgRnVsbFRleHREb2N1bWVudCA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBGdWxsVGV4dERvY3VtZW50Mih1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIGNvbnRlbnQpIHtcbiAgICB0aGlzLl91cmkgPSB1cmk7XG4gICAgdGhpcy5fbGFuZ3VhZ2VJZCA9IGxhbmd1YWdlSWQ7XG4gICAgdGhpcy5fdmVyc2lvbiA9IHZlcnNpb247XG4gICAgdGhpcy5fY29udGVudCA9IGNvbnRlbnQ7XG4gICAgdGhpcy5fbGluZU9mZnNldHMgPSB2b2lkIDA7XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bGxUZXh0RG9jdW1lbnQyLnByb3RvdHlwZSwgXCJ1cmlcIiwge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdXJpO1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVsbFRleHREb2N1bWVudDIucHJvdG90eXBlLCBcImxhbmd1YWdlSWRcIiwge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbGFuZ3VhZ2VJZDtcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bGxUZXh0RG9jdW1lbnQyLnByb3RvdHlwZSwgXCJ2ZXJzaW9uXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3ZlcnNpb247XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIEZ1bGxUZXh0RG9jdW1lbnQyLnByb3RvdHlwZS5nZXRUZXh0ID0gZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICBpZiAocmFuZ2UpIHtcbiAgICAgIHZhciBzdGFydCA9IHRoaXMub2Zmc2V0QXQocmFuZ2Uuc3RhcnQpO1xuICAgICAgdmFyIGVuZCA9IHRoaXMub2Zmc2V0QXQocmFuZ2UuZW5kKTtcbiAgICAgIHJldHVybiB0aGlzLl9jb250ZW50LnN1YnN0cmluZyhzdGFydCwgZW5kKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XG4gIH07XG4gIEZ1bGxUZXh0RG9jdW1lbnQyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihldmVudCwgdmVyc2lvbikge1xuICAgIHRoaXMuX2NvbnRlbnQgPSBldmVudC50ZXh0O1xuICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gdm9pZCAwO1xuICB9O1xuICBGdWxsVGV4dERvY3VtZW50Mi5wcm90b3R5cGUuZ2V0TGluZU9mZnNldHMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZU9mZnNldHMgPT09IHZvaWQgMCkge1xuICAgICAgdmFyIGxpbmVPZmZzZXRzID0gW107XG4gICAgICB2YXIgdGV4dCA9IHRoaXMuX2NvbnRlbnQ7XG4gICAgICB2YXIgaXNMaW5lU3RhcnQgPSB0cnVlO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpc0xpbmVTdGFydCkge1xuICAgICAgICAgIGxpbmVPZmZzZXRzLnB1c2goaSk7XG4gICAgICAgICAgaXNMaW5lU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2ggPSB0ZXh0LmNoYXJBdChpKTtcbiAgICAgICAgaXNMaW5lU3RhcnQgPSBjaCA9PT0gXCJcXHJcIiB8fCBjaCA9PT0gXCJcXG5cIjtcbiAgICAgICAgaWYgKGNoID09PSBcIlxcclwiICYmIGkgKyAxIDwgdGV4dC5sZW5ndGggJiYgdGV4dC5jaGFyQXQoaSArIDEpID09PSBcIlxcblwiKSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNMaW5lU3RhcnQgJiYgdGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxpbmVPZmZzZXRzLnB1c2godGV4dC5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fbGluZU9mZnNldHMgPSBsaW5lT2Zmc2V0cztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2xpbmVPZmZzZXRzO1xuICB9O1xuICBGdWxsVGV4dERvY3VtZW50Mi5wcm90b3R5cGUucG9zaXRpb25BdCA9IGZ1bmN0aW9uKG9mZnNldCkge1xuICAgIG9mZnNldCA9IE1hdGgubWF4KE1hdGgubWluKG9mZnNldCwgdGhpcy5fY29udGVudC5sZW5ndGgpLCAwKTtcbiAgICB2YXIgbGluZU9mZnNldHMgPSB0aGlzLmdldExpbmVPZmZzZXRzKCk7XG4gICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBsaW5lT2Zmc2V0cy5sZW5ndGg7XG4gICAgaWYgKGhpZ2ggPT09IDApIHtcbiAgICAgIHJldHVybiBQb3NpdGlvbi5jcmVhdGUoMCwgb2Zmc2V0KTtcbiAgICB9XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgaWYgKGxpbmVPZmZzZXRzW21pZF0gPiBvZmZzZXQpIHtcbiAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBsaW5lID0gbG93IC0gMTtcbiAgICByZXR1cm4gUG9zaXRpb24uY3JlYXRlKGxpbmUsIG9mZnNldCAtIGxpbmVPZmZzZXRzW2xpbmVdKTtcbiAgfTtcbiAgRnVsbFRleHREb2N1bWVudDIucHJvdG90eXBlLm9mZnNldEF0ID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICB2YXIgbGluZU9mZnNldHMgPSB0aGlzLmdldExpbmVPZmZzZXRzKCk7XG4gICAgaWYgKHBvc2l0aW9uLmxpbmUgPj0gbGluZU9mZnNldHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY29udGVudC5sZW5ndGg7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbi5saW5lIDwgMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHZhciBsaW5lT2Zmc2V0ID0gbGluZU9mZnNldHNbcG9zaXRpb24ubGluZV07XG4gICAgdmFyIG5leHRMaW5lT2Zmc2V0ID0gcG9zaXRpb24ubGluZSArIDEgPCBsaW5lT2Zmc2V0cy5sZW5ndGggPyBsaW5lT2Zmc2V0c1twb3NpdGlvbi5saW5lICsgMV0gOiB0aGlzLl9jb250ZW50Lmxlbmd0aDtcbiAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4obGluZU9mZnNldCArIHBvc2l0aW9uLmNoYXJhY3RlciwgbmV4dExpbmVPZmZzZXQpLCBsaW5lT2Zmc2V0KTtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bGxUZXh0RG9jdW1lbnQyLnByb3RvdHlwZSwgXCJsaW5lQ291bnRcIiwge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRMaW5lT2Zmc2V0cygpLmxlbmd0aDtcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIEZ1bGxUZXh0RG9jdW1lbnQyO1xufSgpO1xudmFyIElzO1xuKGZ1bmN0aW9uKElzMikge1xuICB2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICBmdW5jdGlvbiBkZWZpbmVkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgfVxuICBJczIuZGVmaW5lZCA9IGRlZmluZWQ7XG4gIGZ1bmN0aW9uIHVuZGVmaW5lZDIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xuICB9XG4gIElzMi51bmRlZmluZWQgPSB1bmRlZmluZWQyO1xuICBmdW5jdGlvbiBib29sZWFuKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZTtcbiAgfVxuICBJczIuYm9vbGVhbiA9IGJvb2xlYW47XG4gIGZ1bmN0aW9uIHN0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IFN0cmluZ11cIjtcbiAgfVxuICBJczIuc3RyaW5nID0gc3RyaW5nO1xuICBmdW5jdGlvbiBudW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBOdW1iZXJdXCI7XG4gIH1cbiAgSXMyLm51bWJlciA9IG51bWJlcjtcbiAgZnVuY3Rpb24gbnVtYmVyUmFuZ2UodmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgTnVtYmVyXVwiICYmIG1pbiA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSBtYXg7XG4gIH1cbiAgSXMyLm51bWJlclJhbmdlID0gbnVtYmVyUmFuZ2U7XG4gIGZ1bmN0aW9uIGludGVnZXIyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgTnVtYmVyXVwiICYmIC0yMTQ3NDgzNjQ4IDw9IHZhbHVlICYmIHZhbHVlIDw9IDIxNDc0ODM2NDc7XG4gIH1cbiAgSXMyLmludGVnZXIgPSBpbnRlZ2VyMjtcbiAgZnVuY3Rpb24gdWludGVnZXIyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgTnVtYmVyXVwiICYmIDAgPD0gdmFsdWUgJiYgdmFsdWUgPD0gMjE0NzQ4MzY0NztcbiAgfVxuICBJczIudWludGVnZXIgPSB1aW50ZWdlcjI7XG4gIGZ1bmN0aW9uIGZ1bmModmFsdWUpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBGdW5jdGlvbl1cIjtcbiAgfVxuICBJczIuZnVuYyA9IGZ1bmM7XG4gIGZ1bmN0aW9uIG9iamVjdExpdGVyYWwodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xuICB9XG4gIElzMi5vYmplY3RMaXRlcmFsID0gb2JqZWN0TGl0ZXJhbDtcbiAgZnVuY3Rpb24gdHlwZWRBcnJheSh2YWx1ZSwgY2hlY2spIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUuZXZlcnkoY2hlY2spO1xuICB9XG4gIElzMi50eXBlZEFycmF5ID0gdHlwZWRBcnJheTtcbn0pKElzIHx8IChJcyA9IHt9KSk7XG5cbi8vIHNyYy9jb21tb24vbHNwTGFuZ3VhZ2VGZWF0dXJlcy50c1xudmFyIENvbXBsZXRpb25BZGFwdGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihfd29ya2VyLCBfdHJpZ2dlckNoYXJhY3RlcnMpIHtcbiAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICAgIHRoaXMuX3RyaWdnZXJDaGFyYWN0ZXJzID0gX3RyaWdnZXJDaGFyYWN0ZXJzO1xuICB9XG4gIGdldCB0cmlnZ2VyQ2hhcmFjdGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJpZ2dlckNoYXJhY3RlcnM7XG4gIH1cbiAgcHJvdmlkZUNvbXBsZXRpb25JdGVtcyhtb2RlbCwgcG9zaXRpb24sIGNvbnRleHQsIHRva2VuKSB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgcmV0dXJuIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbigod29ya2VyKSA9PiB7XG4gICAgICByZXR1cm4gd29ya2VyLmRvQ29tcGxldGUocmVzb3VyY2UudG9TdHJpbmcoKSwgZnJvbVBvc2l0aW9uKHBvc2l0aW9uKSk7XG4gICAgfSkudGhlbigoaW5mbykgPT4ge1xuICAgICAgaWYgKCFpbmZvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHdvcmRJbmZvID0gbW9kZWwuZ2V0V29yZFVudGlsUG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgY29uc3Qgd29yZFJhbmdlID0gbmV3IG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLlJhbmdlKHBvc2l0aW9uLmxpbmVOdW1iZXIsIHdvcmRJbmZvLnN0YXJ0Q29sdW1uLCBwb3NpdGlvbi5saW5lTnVtYmVyLCB3b3JkSW5mby5lbmRDb2x1bW4pO1xuICAgICAgY29uc3QgaXRlbXMgPSBpbmZvLml0ZW1zLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHtcbiAgICAgICAgICBsYWJlbDogZW50cnkubGFiZWwsXG4gICAgICAgICAgaW5zZXJ0VGV4dDogZW50cnkuaW5zZXJ0VGV4dCB8fCBlbnRyeS5sYWJlbCxcbiAgICAgICAgICBzb3J0VGV4dDogZW50cnkuc29ydFRleHQsXG4gICAgICAgICAgZmlsdGVyVGV4dDogZW50cnkuZmlsdGVyVGV4dCxcbiAgICAgICAgICBkb2N1bWVudGF0aW9uOiBlbnRyeS5kb2N1bWVudGF0aW9uLFxuICAgICAgICAgIGRldGFpbDogZW50cnkuZGV0YWlsLFxuICAgICAgICAgIGNvbW1hbmQ6IHRvQ29tbWFuZChlbnRyeS5jb21tYW5kKSxcbiAgICAgICAgICByYW5nZTogd29yZFJhbmdlLFxuICAgICAgICAgIGtpbmQ6IHRvQ29tcGxldGlvbkl0ZW1LaW5kKGVudHJ5LmtpbmQpXG4gICAgICAgIH07XG4gICAgICAgIGlmIChlbnRyeS50ZXh0RWRpdCkge1xuICAgICAgICAgIGlmIChpc0luc2VydFJlcGxhY2VFZGl0KGVudHJ5LnRleHRFZGl0KSkge1xuICAgICAgICAgICAgaXRlbS5yYW5nZSA9IHtcbiAgICAgICAgICAgICAgaW5zZXJ0OiB0b1JhbmdlKGVudHJ5LnRleHRFZGl0Lmluc2VydCksXG4gICAgICAgICAgICAgIHJlcGxhY2U6IHRvUmFuZ2UoZW50cnkudGV4dEVkaXQucmVwbGFjZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0ucmFuZ2UgPSB0b1JhbmdlKGVudHJ5LnRleHRFZGl0LnJhbmdlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbS5pbnNlcnRUZXh0ID0gZW50cnkudGV4dEVkaXQubmV3VGV4dDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW50cnkuYWRkaXRpb25hbFRleHRFZGl0cykge1xuICAgICAgICAgIGl0ZW0uYWRkaXRpb25hbFRleHRFZGl0cyA9IGVudHJ5LmFkZGl0aW9uYWxUZXh0RWRpdHMubWFwKHRvVGV4dEVkaXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeS5pbnNlcnRUZXh0Rm9ybWF0ID09PSBJbnNlcnRUZXh0Rm9ybWF0LlNuaXBwZXQpIHtcbiAgICAgICAgICBpdGVtLmluc2VydFRleHRSdWxlcyA9IG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5Db21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlLkluc2VydEFzU25pcHBldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNJbmNvbXBsZXRlOiBpbmZvLmlzSW5jb21wbGV0ZSxcbiAgICAgICAgc3VnZ2VzdGlvbnM6IGl0ZW1zXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gZnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gIGlmICghcG9zaXRpb24pIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIHJldHVybiB7IGNoYXJhY3RlcjogcG9zaXRpb24uY29sdW1uIC0gMSwgbGluZTogcG9zaXRpb24ubGluZU51bWJlciAtIDEgfTtcbn1cbmZ1bmN0aW9uIGZyb21SYW5nZShyYW5nZSkge1xuICBpZiAoIXJhbmdlKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiB7XG4gICAgICBsaW5lOiByYW5nZS5zdGFydExpbmVOdW1iZXIgLSAxLFxuICAgICAgY2hhcmFjdGVyOiByYW5nZS5zdGFydENvbHVtbiAtIDFcbiAgICB9LFxuICAgIGVuZDogeyBsaW5lOiByYW5nZS5lbmRMaW5lTnVtYmVyIC0gMSwgY2hhcmFjdGVyOiByYW5nZS5lbmRDb2x1bW4gLSAxIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHRvUmFuZ2UocmFuZ2UpIHtcbiAgaWYgKCFyYW5nZSkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgcmV0dXJuIG5ldyBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5SYW5nZShyYW5nZS5zdGFydC5saW5lICsgMSwgcmFuZ2Uuc3RhcnQuY2hhcmFjdGVyICsgMSwgcmFuZ2UuZW5kLmxpbmUgKyAxLCByYW5nZS5lbmQuY2hhcmFjdGVyICsgMSk7XG59XG5mdW5jdGlvbiBpc0luc2VydFJlcGxhY2VFZGl0KGVkaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBlZGl0Lmluc2VydCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZWRpdC5yZXBsYWNlICE9PSBcInVuZGVmaW5lZFwiO1xufVxuZnVuY3Rpb24gdG9Db21wbGV0aW9uSXRlbUtpbmQoa2luZCkge1xuICBjb25zdCBtSXRlbUtpbmQgPSBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMuQ29tcGxldGlvbkl0ZW1LaW5kO1xuICBzd2l0Y2ggKGtpbmQpIHtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5UZXh0OlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5UZXh0O1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLk1ldGhvZDpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuTWV0aG9kO1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkZ1bmN0aW9uOlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5GdW5jdGlvbjtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5Db25zdHJ1Y3RvcjpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuQ29uc3RydWN0b3I7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuRmllbGQ6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLkZpZWxkO1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLlZhcmlhYmxlOlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5WYXJpYWJsZTtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5DbGFzczpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuQ2xhc3M7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlOlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5JbnRlcmZhY2U7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlOlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5Nb2R1bGU7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHk6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLlByb3BlcnR5O1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLlVuaXQ6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLlVuaXQ7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuVmFsdWU6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLlZhbHVlO1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkVudW06XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLkVudW07XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZDpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuS2V5d29yZDtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5TbmlwcGV0OlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5TbmlwcGV0O1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkNvbG9yOlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5Db2xvcjtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5GaWxlOlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5GaWxlO1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLlJlZmVyZW5jZTpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuUmVmZXJlbmNlO1xuICB9XG4gIHJldHVybiBtSXRlbUtpbmQuUHJvcGVydHk7XG59XG5mdW5jdGlvbiB0b1RleHRFZGl0KHRleHRFZGl0KSB7XG4gIGlmICghdGV4dEVkaXQpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIHJldHVybiB7XG4gICAgcmFuZ2U6IHRvUmFuZ2UodGV4dEVkaXQucmFuZ2UpLFxuICAgIHRleHQ6IHRleHRFZGl0Lm5ld1RleHRcbiAgfTtcbn1cbmZ1bmN0aW9uIHRvQ29tbWFuZChjKSB7XG4gIHJldHVybiBjICYmIGMuY29tbWFuZCA9PT0gXCJlZGl0b3IuYWN0aW9uLnRyaWdnZXJTdWdnZXN0XCIgPyB7IGlkOiBjLmNvbW1hbmQsIHRpdGxlOiBjLnRpdGxlLCBhcmd1bWVudHM6IGMuYXJndW1lbnRzIH0gOiB2b2lkIDA7XG59XG52YXIgSG92ZXJBZGFwdGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihfd29ya2VyKSB7XG4gICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgfVxuICBwcm92aWRlSG92ZXIobW9kZWwsIHBvc2l0aW9uLCB0b2tlbikge1xuICAgIGxldCByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKCh3b3JrZXIpID0+IHtcbiAgICAgIHJldHVybiB3b3JrZXIuZG9Ib3ZlcihyZXNvdXJjZS50b1N0cmluZygpLCBmcm9tUG9zaXRpb24ocG9zaXRpb24pKTtcbiAgICB9KS50aGVuKChpbmZvKSA9PiB7XG4gICAgICBpZiAoIWluZm8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmFuZ2U6IHRvUmFuZ2UoaW5mby5yYW5nZSksXG4gICAgICAgIGNvbnRlbnRzOiB0b01hcmtlZFN0cmluZ0FycmF5KGluZm8uY29udGVudHMpXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gaXNNYXJrdXBDb250ZW50KHRoaW5nKSB7XG4gIHJldHVybiB0aGluZyAmJiB0eXBlb2YgdGhpbmcgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHRoaW5nLmtpbmQgPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiB0b01hcmtkb3duU3RyaW5nKGVudHJ5KSB7XG4gIGlmICh0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IGVudHJ5XG4gICAgfTtcbiAgfVxuICBpZiAoaXNNYXJrdXBDb250ZW50KGVudHJ5KSkge1xuICAgIGlmIChlbnRyeS5raW5kID09PSBcInBsYWludGV4dFwiKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogZW50cnkudmFsdWUucmVwbGFjZSgvW1xcXFxgKl97fVtcXF0oKSMrXFwtLiFdL2csIFwiXFxcXCQmXCIpXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IGVudHJ5LnZhbHVlXG4gICAgfTtcbiAgfVxuICByZXR1cm4geyB2YWx1ZTogXCJgYGBcIiArIGVudHJ5Lmxhbmd1YWdlICsgXCJcXG5cIiArIGVudHJ5LnZhbHVlICsgXCJcXG5gYGBcXG5cIiB9O1xufVxuZnVuY3Rpb24gdG9NYXJrZWRTdHJpbmdBcnJheShjb250ZW50cykge1xuICBpZiAoIWNvbnRlbnRzKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShjb250ZW50cykpIHtcbiAgICByZXR1cm4gY29udGVudHMubWFwKHRvTWFya2Rvd25TdHJpbmcpO1xuICB9XG4gIHJldHVybiBbdG9NYXJrZG93blN0cmluZyhjb250ZW50cyldO1xufVxudmFyIERvY3VtZW50SGlnaGxpZ2h0QWRhcHRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3dvcmtlcikge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gIH1cbiAgcHJvdmlkZURvY3VtZW50SGlnaGxpZ2h0cyhtb2RlbCwgcG9zaXRpb24sIHRva2VuKSB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgcmV0dXJuIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbigod29ya2VyKSA9PiB3b3JrZXIuZmluZERvY3VtZW50SGlnaGxpZ2h0cyhyZXNvdXJjZS50b1N0cmluZygpLCBmcm9tUG9zaXRpb24ocG9zaXRpb24pKSkudGhlbigoZW50cmllcykgPT4ge1xuICAgICAgaWYgKCFlbnRyaWVzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbnRyaWVzLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByYW5nZTogdG9SYW5nZShlbnRyeS5yYW5nZSksXG4gICAgICAgICAga2luZDogdG9Eb2N1bWVudEhpZ2hsaWdodEtpbmQoZW50cnkua2luZClcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gdG9Eb2N1bWVudEhpZ2hsaWdodEtpbmQoa2luZCkge1xuICBzd2l0Y2ggKGtpbmQpIHtcbiAgICBjYXNlIERvY3VtZW50SGlnaGxpZ2h0S2luZC5SZWFkOlxuICAgICAgcmV0dXJuIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5Eb2N1bWVudEhpZ2hsaWdodEtpbmQuUmVhZDtcbiAgICBjYXNlIERvY3VtZW50SGlnaGxpZ2h0S2luZC5Xcml0ZTpcbiAgICAgIHJldHVybiBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMuRG9jdW1lbnRIaWdobGlnaHRLaW5kLldyaXRlO1xuICAgIGNhc2UgRG9jdW1lbnRIaWdobGlnaHRLaW5kLlRleHQ6XG4gICAgICByZXR1cm4gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLkRvY3VtZW50SGlnaGxpZ2h0S2luZC5UZXh0O1xuICB9XG4gIHJldHVybiBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMuRG9jdW1lbnRIaWdobGlnaHRLaW5kLlRleHQ7XG59XG52YXIgUmVuYW1lQWRhcHRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3dvcmtlcikge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gIH1cbiAgcHJvdmlkZVJlbmFtZUVkaXRzKG1vZGVsLCBwb3NpdGlvbiwgbmV3TmFtZSwgdG9rZW4pIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKCh3b3JrZXIpID0+IHtcbiAgICAgIHJldHVybiB3b3JrZXIuZG9SZW5hbWUocmVzb3VyY2UudG9TdHJpbmcoKSwgZnJvbVBvc2l0aW9uKHBvc2l0aW9uKSwgbmV3TmFtZSk7XG4gICAgfSkudGhlbigoZWRpdCkgPT4ge1xuICAgICAgcmV0dXJuIHRvV29ya3NwYWNlRWRpdChlZGl0KTtcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIHRvV29ya3NwYWNlRWRpdChlZGl0KSB7XG4gIGlmICghZWRpdCB8fCAhZWRpdC5jaGFuZ2VzKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBsZXQgcmVzb3VyY2VFZGl0cyA9IFtdO1xuICBmb3IgKGxldCB1cmkgaW4gZWRpdC5jaGFuZ2VzKSB7XG4gICAgY29uc3QgX3VyaSA9IG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLlVyaS5wYXJzZSh1cmkpO1xuICAgIGZvciAobGV0IGUgb2YgZWRpdC5jaGFuZ2VzW3VyaV0pIHtcbiAgICAgIHJlc291cmNlRWRpdHMucHVzaCh7XG4gICAgICAgIHJlc291cmNlOiBfdXJpLFxuICAgICAgICBlZGl0OiB7XG4gICAgICAgICAgcmFuZ2U6IHRvUmFuZ2UoZS5yYW5nZSksXG4gICAgICAgICAgdGV4dDogZS5uZXdUZXh0XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIGVkaXRzOiByZXNvdXJjZUVkaXRzXG4gIH07XG59XG52YXIgRG9jdW1lbnRTeW1ib2xBZGFwdGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihfd29ya2VyKSB7XG4gICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgfVxuICBwcm92aWRlRG9jdW1lbnRTeW1ib2xzKG1vZGVsLCB0b2tlbikge1xuICAgIGNvbnN0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4gd29ya2VyLmZpbmREb2N1bWVudFN5bWJvbHMocmVzb3VyY2UudG9TdHJpbmcoKSkpLnRoZW4oKGl0ZW1zKSA9PiB7XG4gICAgICBpZiAoIWl0ZW1zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVtcy5tYXAoKGl0ZW0pID0+ICh7XG4gICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcbiAgICAgICAgZGV0YWlsOiBcIlwiLFxuICAgICAgICBjb250YWluZXJOYW1lOiBpdGVtLmNvbnRhaW5lck5hbWUsXG4gICAgICAgIGtpbmQ6IHRvU3ltYm9sS2luZChpdGVtLmtpbmQpLFxuICAgICAgICByYW5nZTogdG9SYW5nZShpdGVtLmxvY2F0aW9uLnJhbmdlKSxcbiAgICAgICAgc2VsZWN0aW9uUmFuZ2U6IHRvUmFuZ2UoaXRlbS5sb2NhdGlvbi5yYW5nZSksXG4gICAgICAgIHRhZ3M6IFtdXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiB0b1N5bWJvbEtpbmQoa2luZCkge1xuICBsZXQgbUtpbmQgPSBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMuU3ltYm9sS2luZDtcbiAgc3dpdGNoIChraW5kKSB7XG4gICAgY2FzZSBTeW1ib2xLaW5kLkZpbGU6XG4gICAgICByZXR1cm4gbUtpbmQuQXJyYXk7XG4gICAgY2FzZSBTeW1ib2xLaW5kLk1vZHVsZTpcbiAgICAgIHJldHVybiBtS2luZC5Nb2R1bGU7XG4gICAgY2FzZSBTeW1ib2xLaW5kLk5hbWVzcGFjZTpcbiAgICAgIHJldHVybiBtS2luZC5OYW1lc3BhY2U7XG4gICAgY2FzZSBTeW1ib2xLaW5kLlBhY2thZ2U6XG4gICAgICByZXR1cm4gbUtpbmQuUGFja2FnZTtcbiAgICBjYXNlIFN5bWJvbEtpbmQuQ2xhc3M6XG4gICAgICByZXR1cm4gbUtpbmQuQ2xhc3M7XG4gICAgY2FzZSBTeW1ib2xLaW5kLk1ldGhvZDpcbiAgICAgIHJldHVybiBtS2luZC5NZXRob2Q7XG4gICAgY2FzZSBTeW1ib2xLaW5kLlByb3BlcnR5OlxuICAgICAgcmV0dXJuIG1LaW5kLlByb3BlcnR5O1xuICAgIGNhc2UgU3ltYm9sS2luZC5GaWVsZDpcbiAgICAgIHJldHVybiBtS2luZC5GaWVsZDtcbiAgICBjYXNlIFN5bWJvbEtpbmQuQ29uc3RydWN0b3I6XG4gICAgICByZXR1cm4gbUtpbmQuQ29uc3RydWN0b3I7XG4gICAgY2FzZSBTeW1ib2xLaW5kLkVudW06XG4gICAgICByZXR1cm4gbUtpbmQuRW51bTtcbiAgICBjYXNlIFN5bWJvbEtpbmQuSW50ZXJmYWNlOlxuICAgICAgcmV0dXJuIG1LaW5kLkludGVyZmFjZTtcbiAgICBjYXNlIFN5bWJvbEtpbmQuRnVuY3Rpb246XG4gICAgICByZXR1cm4gbUtpbmQuRnVuY3Rpb247XG4gICAgY2FzZSBTeW1ib2xLaW5kLlZhcmlhYmxlOlxuICAgICAgcmV0dXJuIG1LaW5kLlZhcmlhYmxlO1xuICAgIGNhc2UgU3ltYm9sS2luZC5Db25zdGFudDpcbiAgICAgIHJldHVybiBtS2luZC5Db25zdGFudDtcbiAgICBjYXNlIFN5bWJvbEtpbmQuU3RyaW5nOlxuICAgICAgcmV0dXJuIG1LaW5kLlN0cmluZztcbiAgICBjYXNlIFN5bWJvbEtpbmQuTnVtYmVyOlxuICAgICAgcmV0dXJuIG1LaW5kLk51bWJlcjtcbiAgICBjYXNlIFN5bWJvbEtpbmQuQm9vbGVhbjpcbiAgICAgIHJldHVybiBtS2luZC5Cb29sZWFuO1xuICAgIGNhc2UgU3ltYm9sS2luZC5BcnJheTpcbiAgICAgIHJldHVybiBtS2luZC5BcnJheTtcbiAgfVxuICByZXR1cm4gbUtpbmQuRnVuY3Rpb247XG59XG52YXIgRG9jdW1lbnRMaW5rQWRhcHRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3dvcmtlcikge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gIH1cbiAgcHJvdmlkZUxpbmtzKG1vZGVsLCB0b2tlbikge1xuICAgIGNvbnN0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4gd29ya2VyLmZpbmREb2N1bWVudExpbmtzKHJlc291cmNlLnRvU3RyaW5nKCkpKS50aGVuKChpdGVtcykgPT4ge1xuICAgICAgaWYgKCFpdGVtcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5rczogaXRlbXMubWFwKChpdGVtKSA9PiAoe1xuICAgICAgICAgIHJhbmdlOiB0b1JhbmdlKGl0ZW0ucmFuZ2UpLFxuICAgICAgICAgIHVybDogaXRlbS50YXJnZXRcbiAgICAgICAgfSkpXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59O1xudmFyIERvY3VtZW50Rm9ybWF0dGluZ0VkaXRQcm92aWRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3dvcmtlcikge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gIH1cbiAgcHJvdmlkZURvY3VtZW50Rm9ybWF0dGluZ0VkaXRzKG1vZGVsLCBvcHRpb25zLCB0b2tlbikge1xuICAgIGNvbnN0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4ge1xuICAgICAgcmV0dXJuIHdvcmtlci5mb3JtYXQocmVzb3VyY2UudG9TdHJpbmcoKSwgbnVsbCwgZnJvbUZvcm1hdHRpbmdPcHRpb25zKG9wdGlvbnMpKS50aGVuKChlZGl0cykgPT4ge1xuICAgICAgICBpZiAoIWVkaXRzIHx8IGVkaXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWRpdHMubWFwKHRvVGV4dEVkaXQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG52YXIgRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF93b3JrZXIpIHtcbiAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICB9XG4gIHByb3ZpZGVEb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXRzKG1vZGVsLCByYW5nZSwgb3B0aW9ucywgdG9rZW4pIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKCh3b3JrZXIpID0+IHtcbiAgICAgIHJldHVybiB3b3JrZXIuZm9ybWF0KHJlc291cmNlLnRvU3RyaW5nKCksIGZyb21SYW5nZShyYW5nZSksIGZyb21Gb3JtYXR0aW5nT3B0aW9ucyhvcHRpb25zKSkudGhlbigoZWRpdHMpID0+IHtcbiAgICAgICAgaWYgKCFlZGl0cyB8fCBlZGl0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVkaXRzLm1hcCh0b1RleHRFZGl0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gZnJvbUZvcm1hdHRpbmdPcHRpb25zKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHtcbiAgICB0YWJTaXplOiBvcHRpb25zLnRhYlNpemUsXG4gICAgaW5zZXJ0U3BhY2VzOiBvcHRpb25zLmluc2VydFNwYWNlc1xuICB9O1xufVxudmFyIEZvbGRpbmdSYW5nZUFkYXB0ZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF93b3JrZXIpIHtcbiAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICB9XG4gIHByb3ZpZGVGb2xkaW5nUmFuZ2VzKG1vZGVsLCBjb250ZXh0LCB0b2tlbikge1xuICAgIGNvbnN0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4gd29ya2VyLmdldEZvbGRpbmdSYW5nZXMocmVzb3VyY2UudG9TdHJpbmcoKSwgY29udGV4dCkpLnRoZW4oKHJhbmdlcykgPT4ge1xuICAgICAgaWYgKCFyYW5nZXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJhbmdlcy5tYXAoKHJhbmdlKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICBzdGFydDogcmFuZ2Uuc3RhcnRMaW5lICsgMSxcbiAgICAgICAgICBlbmQ6IHJhbmdlLmVuZExpbmUgKyAxXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgcmFuZ2Uua2luZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIHJlc3VsdC5raW5kID0gdG9Gb2xkaW5nUmFuZ2VLaW5kKHJhbmdlLmtpbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIHRvRm9sZGluZ1JhbmdlS2luZChraW5kKSB7XG4gIHN3aXRjaCAoa2luZCkge1xuICAgIGNhc2UgRm9sZGluZ1JhbmdlS2luZC5Db21tZW50OlxuICAgICAgcmV0dXJuIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5Gb2xkaW5nUmFuZ2VLaW5kLkNvbW1lbnQ7XG4gICAgY2FzZSBGb2xkaW5nUmFuZ2VLaW5kLkltcG9ydHM6XG4gICAgICByZXR1cm4gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLkZvbGRpbmdSYW5nZUtpbmQuSW1wb3J0cztcbiAgICBjYXNlIEZvbGRpbmdSYW5nZUtpbmQuUmVnaW9uOlxuICAgICAgcmV0dXJuIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5Gb2xkaW5nUmFuZ2VLaW5kLlJlZ2lvbjtcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxudmFyIFNlbGVjdGlvblJhbmdlQWRhcHRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3dvcmtlcikge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gIH1cbiAgcHJvdmlkZVNlbGVjdGlvblJhbmdlcyhtb2RlbCwgcG9zaXRpb25zLCB0b2tlbikge1xuICAgIGNvbnN0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4gd29ya2VyLmdldFNlbGVjdGlvblJhbmdlcyhyZXNvdXJjZS50b1N0cmluZygpLCBwb3NpdGlvbnMubWFwKGZyb21Qb3NpdGlvbikpKS50aGVuKChzZWxlY3Rpb25SYW5nZXMpID0+IHtcbiAgICAgIGlmICghc2VsZWN0aW9uUmFuZ2VzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxlY3Rpb25SYW5nZXMubWFwKChzZWxlY3Rpb25SYW5nZSkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgd2hpbGUgKHNlbGVjdGlvblJhbmdlKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goeyByYW5nZTogdG9SYW5nZShzZWxlY3Rpb25SYW5nZS5yYW5nZSkgfSk7XG4gICAgICAgICAgc2VsZWN0aW9uUmFuZ2UgPSBzZWxlY3Rpb25SYW5nZS5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuXG4vLyBzcmMvaHRtbC9odG1sTW9kZS50c1xudmFyIEhUTUxDb21wbGV0aW9uQWRhcHRlciA9IGNsYXNzIGV4dGVuZHMgQ29tcGxldGlvbkFkYXB0ZXIge1xuICBjb25zdHJ1Y3Rvcih3b3JrZXIpIHtcbiAgICBzdXBlcih3b3JrZXIsIFtcIi5cIiwgXCI6XCIsIFwiPFwiLCAnXCInLCBcIj1cIiwgXCIvXCJdKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHNldHVwTW9kZTEoZGVmYXVsdHMpIHtcbiAgY29uc3QgY2xpZW50ID0gbmV3IFdvcmtlck1hbmFnZXIoZGVmYXVsdHMpO1xuICBjb25zdCB3b3JrZXIgPSAoLi4udXJpcykgPT4ge1xuICAgIHJldHVybiBjbGllbnQuZ2V0TGFuZ3VhZ2VTZXJ2aWNlV29ya2VyKC4uLnVyaXMpO1xuICB9O1xuICBsZXQgbGFuZ3VhZ2VJZCA9IGRlZmF1bHRzLmxhbmd1YWdlSWQ7XG4gIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5yZWdpc3RlckNvbXBsZXRpb25JdGVtUHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IEhUTUxDb21wbGV0aW9uQWRhcHRlcih3b3JrZXIpKTtcbiAgbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVySG92ZXJQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgSG92ZXJBZGFwdGVyKHdvcmtlcikpO1xuICBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMucmVnaXN0ZXJEb2N1bWVudEhpZ2hsaWdodFByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBEb2N1bWVudEhpZ2hsaWdodEFkYXB0ZXIod29ya2VyKSk7XG4gIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5yZWdpc3RlckxpbmtQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgRG9jdW1lbnRMaW5rQWRhcHRlcih3b3JrZXIpKTtcbiAgbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVyRm9sZGluZ1JhbmdlUHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IEZvbGRpbmdSYW5nZUFkYXB0ZXIod29ya2VyKSk7XG4gIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5yZWdpc3RlckRvY3VtZW50U3ltYm9sUHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IERvY3VtZW50U3ltYm9sQWRhcHRlcih3b3JrZXIpKTtcbiAgbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVyU2VsZWN0aW9uUmFuZ2VQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgU2VsZWN0aW9uUmFuZ2VBZGFwdGVyKHdvcmtlcikpO1xuICBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMucmVnaXN0ZXJSZW5hbWVQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgUmVuYW1lQWRhcHRlcih3b3JrZXIpKTtcbiAgaWYgKGxhbmd1YWdlSWQgPT09IFwiaHRtbFwiKSB7XG4gICAgbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVyRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBEb2N1bWVudEZvcm1hdHRpbmdFZGl0UHJvdmlkZXIod29ya2VyKSk7XG4gICAgbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVyRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKHdvcmtlcikpO1xuICB9XG59XG5mdW5jdGlvbiBzZXR1cE1vZGUoZGVmYXVsdHMpIHtcbiAgY29uc3QgZGlzcG9zYWJsZXMgPSBbXTtcbiAgY29uc3QgcHJvdmlkZXJzID0gW107XG4gIGNvbnN0IGNsaWVudCA9IG5ldyBXb3JrZXJNYW5hZ2VyKGRlZmF1bHRzKTtcbiAgZGlzcG9zYWJsZXMucHVzaChjbGllbnQpO1xuICBjb25zdCB3b3JrZXIgPSAoLi4udXJpcykgPT4ge1xuICAgIHJldHVybiBjbGllbnQuZ2V0TGFuZ3VhZ2VTZXJ2aWNlV29ya2VyKC4uLnVyaXMpO1xuICB9O1xuICBmdW5jdGlvbiByZWdpc3RlclByb3ZpZGVycygpIHtcbiAgICBjb25zdCB7IGxhbmd1YWdlSWQsIG1vZGVDb25maWd1cmF0aW9uIH0gPSBkZWZhdWx0cztcbiAgICBkaXNwb3NlQWxsKHByb3ZpZGVycyk7XG4gICAgaWYgKG1vZGVDb25maWd1cmF0aW9uLmNvbXBsZXRpb25JdGVtcykge1xuICAgICAgcHJvdmlkZXJzLnB1c2gobW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVyQ29tcGxldGlvbkl0ZW1Qcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgSFRNTENvbXBsZXRpb25BZGFwdGVyKHdvcmtlcikpKTtcbiAgICB9XG4gICAgaWYgKG1vZGVDb25maWd1cmF0aW9uLmhvdmVycykge1xuICAgICAgcHJvdmlkZXJzLnB1c2gobW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVySG92ZXJQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgSG92ZXJBZGFwdGVyKHdvcmtlcikpKTtcbiAgICB9XG4gICAgaWYgKG1vZGVDb25maWd1cmF0aW9uLmRvY3VtZW50SGlnaGxpZ2h0cykge1xuICAgICAgcHJvdmlkZXJzLnB1c2gobW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVyRG9jdW1lbnRIaWdobGlnaHRQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgRG9jdW1lbnRIaWdobGlnaHRBZGFwdGVyKHdvcmtlcikpKTtcbiAgICB9XG4gICAgaWYgKG1vZGVDb25maWd1cmF0aW9uLmxpbmtzKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMucmVnaXN0ZXJMaW5rUHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IERvY3VtZW50TGlua0FkYXB0ZXIod29ya2VyKSkpO1xuICAgIH1cbiAgICBpZiAobW9kZUNvbmZpZ3VyYXRpb24uZG9jdW1lbnRTeW1ib2xzKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMucmVnaXN0ZXJEb2N1bWVudFN5bWJvbFByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBEb2N1bWVudFN5bWJvbEFkYXB0ZXIod29ya2VyKSkpO1xuICAgIH1cbiAgICBpZiAobW9kZUNvbmZpZ3VyYXRpb24ucmVuYW1lKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMucmVnaXN0ZXJSZW5hbWVQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgUmVuYW1lQWRhcHRlcih3b3JrZXIpKSk7XG4gICAgfVxuICAgIGlmIChtb2RlQ29uZmlndXJhdGlvbi5mb2xkaW5nUmFuZ2VzKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMucmVnaXN0ZXJGb2xkaW5nUmFuZ2VQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgRm9sZGluZ1JhbmdlQWRhcHRlcih3b3JrZXIpKSk7XG4gICAgfVxuICAgIGlmIChtb2RlQ29uZmlndXJhdGlvbi5zZWxlY3Rpb25SYW5nZXMpIHtcbiAgICAgIHByb3ZpZGVycy5wdXNoKG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5yZWdpc3RlclNlbGVjdGlvblJhbmdlUHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IFNlbGVjdGlvblJhbmdlQWRhcHRlcih3b3JrZXIpKSk7XG4gICAgfVxuICAgIGlmIChtb2RlQ29uZmlndXJhdGlvbi5kb2N1bWVudEZvcm1hdHRpbmdFZGl0cykge1xuICAgICAgcHJvdmlkZXJzLnB1c2gobW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVyRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBEb2N1bWVudEZvcm1hdHRpbmdFZGl0UHJvdmlkZXIod29ya2VyKSkpO1xuICAgIH1cbiAgICBpZiAobW9kZUNvbmZpZ3VyYXRpb24uZG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0cykge1xuICAgICAgcHJvdmlkZXJzLnB1c2gobW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVyRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKHdvcmtlcikpKTtcbiAgICB9XG4gIH1cbiAgcmVnaXN0ZXJQcm92aWRlcnMoKTtcbiAgZGlzcG9zYWJsZXMucHVzaChhc0Rpc3Bvc2FibGUocHJvdmlkZXJzKSk7XG4gIHJldHVybiBhc0Rpc3Bvc2FibGUoZGlzcG9zYWJsZXMpO1xufVxuZnVuY3Rpb24gYXNEaXNwb3NhYmxlKGRpc3Bvc2FibGVzKSB7XG4gIHJldHVybiB7IGRpc3Bvc2U6ICgpID0+IGRpc3Bvc2VBbGwoZGlzcG9zYWJsZXMpIH07XG59XG5mdW5jdGlvbiBkaXNwb3NlQWxsKGRpc3Bvc2FibGVzKSB7XG4gIHdoaWxlIChkaXNwb3NhYmxlcy5sZW5ndGgpIHtcbiAgICBkaXNwb3NhYmxlcy5wb3AoKS5kaXNwb3NlKCk7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIHNldHVwTW9kZSxcbiAgc2V0dXBNb2RlMVxufTtcbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIm1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzIiwidmFsdWUiLCJ0YXJnZXQiLCJtb2R1bGUiLCJkZXNjIiwia2V5IiwiY2FsbCIsImdldCIsImVudW1lcmFibGUiLCJfX3JlRXhwb3J0IiwiaW50ZWdlciIsImludGVnZXIyIiwidWludGVnZXIiLCJ1aW50ZWdlcjIiLCJQb3NpdGlvbiIsIlBvc2l0aW9uMyIsIlJhbmdlIiwiUmFuZ2UzIiwiTG9jYXRpb24iLCJMb2NhdGlvbjIiLCJMb2NhdGlvbkxpbmsiLCJMb2NhdGlvbkxpbmsyIiwiQ29sb3IiLCJDb2xvcjIiLCJDb2xvckluZm9ybWF0aW9uIiwiQ29sb3JJbmZvcm1hdGlvbjIiLCJDb2xvclByZXNlbnRhdGlvbiIsIkNvbG9yUHJlc2VudGF0aW9uMiIsIkZvbGRpbmdSYW5nZUtpbmQiLCJGb2xkaW5nUmFuZ2VLaW5kMiIsIkZvbGRpbmdSYW5nZSIsIkZvbGRpbmdSYW5nZTIiLCJEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uIiwiRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbjIiLCJEaWFnbm9zdGljU2V2ZXJpdHkiLCJEaWFnbm9zdGljU2V2ZXJpdHkyIiwiRGlhZ25vc3RpY1RhZyIsIkRpYWdub3N0aWNUYWcyIiwiQ29kZURlc2NyaXB0aW9uIiwiRGlhZ25vc3RpYyIsIkRpYWdub3N0aWMyIiwiQ29tbWFuZCIsIkNvbW1hbmQyIiwiVGV4dEVkaXQiLCJUZXh0RWRpdDIiLCJDaGFuZ2VBbm5vdGF0aW9uIiwiQ2hhbmdlQW5ub3RhdGlvbjIiLCJDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllciIsIkFubm90YXRlZFRleHRFZGl0IiwiQW5ub3RhdGVkVGV4dEVkaXQyIiwiVGV4dERvY3VtZW50RWRpdCIsIlRleHREb2N1bWVudEVkaXQyIiwiQ3JlYXRlRmlsZSIsIkNyZWF0ZUZpbGUyIiwiUmVuYW1lRmlsZSIsIlJlbmFtZUZpbGUyIiwiRGVsZXRlRmlsZSIsIkRlbGV0ZUZpbGUyIiwiV29ya3NwYWNlRWRpdCIsIldvcmtlck1hbmFnZXIiLCJjb25zdHJ1Y3RvciIsImRlZmF1bHRzIiwidGhpcyIsIl9kZWZhdWx0cyIsIl93b3JrZXIiLCJfY2xpZW50IiwiX2lkbGVDaGVja0ludGVydmFsIiwid2luZG93Iiwic2V0SW50ZXJ2YWwiLCJfY2hlY2tJZklkbGUiLCJfbGFzdFVzZWRUaW1lIiwiX2NvbmZpZ0NoYW5nZUxpc3RlbmVyIiwib25EaWRDaGFuZ2UiLCJfc3RvcFdvcmtlciIsImRpc3Bvc2UiLCJjbGVhckludGVydmFsIiwiRGF0ZSIsIm5vdyIsIl9nZXRDbGllbnQiLCJlZGl0b3IiLCJjcmVhdGVXZWJXb3JrZXIiLCJtb2R1bGVJZCIsImNyZWF0ZURhdGEiLCJsYW5ndWFnZVNldHRpbmdzIiwib3B0aW9ucyIsImxhbmd1YWdlSWQiLCJsYWJlbCIsImdldFByb3h5IiwiZ2V0TGFuZ3VhZ2VTZXJ2aWNlV29ya2VyIiwicmVzb3VyY2VzIiwidGhlbiIsImNsaWVudCIsIl8iLCJ3aXRoU3luY2VkUmVzb3VyY2VzIiwiTUlOX1ZBTFVFIiwiTUFYX1ZBTFVFIiwiY3JlYXRlIiwibGluZSIsImNoYXJhY3RlciIsIk51bWJlciIsImlzIiwiY2FuZGlkYXRlIiwiSXMiLCJvYmplY3RMaXRlcmFsIiwib25lIiwidHdvIiwidGhyZWUiLCJmb3VyIiwic3RhcnQiLCJlbmQiLCJFcnJvciIsInVyaSIsInJhbmdlIiwiZGVmaW5lZCIsInN0cmluZyIsInVuZGVmaW5lZCIsInRhcmdldFVyaSIsInRhcmdldFJhbmdlIiwidGFyZ2V0U2VsZWN0aW9uUmFuZ2UiLCJvcmlnaW5TZWxlY3Rpb25SYW5nZSIsInJlZCIsImdyZWVuIiwiYmx1ZSIsImFscGhhIiwibnVtYmVyUmFuZ2UiLCJjb2xvciIsInRleHRFZGl0IiwiYWRkaXRpb25hbFRleHRFZGl0cyIsInR5cGVkQXJyYXkiLCJzdGFydExpbmUiLCJlbmRMaW5lIiwic3RhcnRDaGFyYWN0ZXIiLCJlbmRDaGFyYWN0ZXIiLCJraW5kIiwicmVzdWx0IiwibG9jYXRpb24iLCJtZXNzYWdlIiwiV2FybmluZyIsIkluZm9ybWF0aW9uIiwiSGludCIsIlVubmVjZXNzYXJ5IiwiRGVwcmVjYXRlZCIsImhyZWYiLCJzZXZlcml0eSIsImNvZGUiLCJzb3VyY2UiLCJyZWxhdGVkSW5mb3JtYXRpb24iLCJfYSIsIm51bWJlciIsImNvZGVEZXNjcmlwdGlvbiIsInRpdGxlIiwiY29tbWFuZCIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInJlcGxhY2UiLCJuZXdUZXh0IiwiaW5zZXJ0IiwicG9zaXRpb24iLCJkZWwiLCJuZWVkc0NvbmZpcm1hdGlvbiIsImRlc2NyaXB0aW9uIiwiYm9vbGVhbiIsImFubm90YXRpb24iLCJhbm5vdGF0aW9uSWQiLCJ0ZXh0RG9jdW1lbnQiLCJlZGl0cyIsIk9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciIsIkFycmF5IiwiaXNBcnJheSIsIm92ZXJ3cml0ZSIsImlnbm9yZUlmRXhpc3RzIiwib2xkVXJpIiwibmV3VXJpIiwicmVjdXJzaXZlIiwiaWdub3JlSWZOb3RFeGlzdHMiLCJjaGFuZ2VzIiwiZG9jdW1lbnRDaGFuZ2VzIiwiZXZlcnkiLCJjaGFuZ2UiLCJUZXh0RG9jdW1lbnRJZGVudGlmaWVyIiwiVGV4dERvY3VtZW50SWRlbnRpZmllcjIiLCJWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIiwiVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjIiLCJPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyIiwiVGV4dERvY3VtZW50SXRlbSIsIlRleHREb2N1bWVudEl0ZW0yIiwiTWFya3VwS2luZCIsIk1hcmt1cEtpbmQyIiwiTWFya3VwQ29udGVudCIsIkNvbXBsZXRpb25JdGVtS2luZCIsIkNvbXBsZXRpb25JdGVtS2luZDIiLCJJbnNlcnRUZXh0Rm9ybWF0IiwiSW5zZXJ0VGV4dEZvcm1hdDIiLCJDb21wbGV0aW9uSXRlbVRhZyIsIkluc2VydFJlcGxhY2VFZGl0IiwiSW5zZXJ0UmVwbGFjZUVkaXQyIiwiSW5zZXJ0VGV4dE1vZGUiLCJJbnNlcnRUZXh0TW9kZTIiLCJDb21wbGV0aW9uSXRlbSIsIkNvbXBsZXRpb25MaXN0IiwiTWFya2VkU3RyaW5nIiwiTWFya2VkU3RyaW5nMiIsIkhvdmVyIiwiUGFyYW1ldGVySW5mb3JtYXRpb24iLCJTaWduYXR1cmVJbmZvcm1hdGlvbiIsIkRvY3VtZW50SGlnaGxpZ2h0S2luZCIsIkRvY3VtZW50SGlnaGxpZ2h0S2luZDIiLCJEb2N1bWVudEhpZ2hsaWdodCIsIlN5bWJvbEtpbmQiLCJTeW1ib2xLaW5kMiIsIlN5bWJvbFRhZyIsIlN5bWJvbEluZm9ybWF0aW9uIiwiRG9jdW1lbnRTeW1ib2wiLCJEb2N1bWVudFN5bWJvbDIiLCJDb2RlQWN0aW9uS2luZCIsIkNvZGVBY3Rpb25LaW5kMiIsIkNvZGVBY3Rpb25Db250ZXh0IiwiQ29kZUFjdGlvbkNvbnRleHQyIiwiQ29kZUFjdGlvbiIsIkNvZGVBY3Rpb24yIiwiQ29kZUxlbnMiLCJDb2RlTGVuczIiLCJGb3JtYXR0aW5nT3B0aW9ucyIsIkZvcm1hdHRpbmdPcHRpb25zMiIsIkRvY3VtZW50TGluayIsIkRvY3VtZW50TGluazIiLCJTZWxlY3Rpb25SYW5nZSIsIlNlbGVjdGlvblJhbmdlMiIsIlRleHREb2N1bWVudCIsIlRleHRFZGl0Q2hhbmdlSW1wbCIsIlRleHRFZGl0Q2hhbmdlSW1wbDIiLCJjaGFuZ2VBbm5vdGF0aW9ucyIsImVkaXQiLCJpZCIsImFzc2VydENoYW5nZUFubm90YXRpb25zIiwibWFuYWdlIiwicHVzaCIsImRlbGV0ZSIsImFkZCIsImFsbCIsImNsZWFyIiwic3BsaWNlIiwiQ2hhbmdlQW5ub3RhdGlvbnMiLCJDaGFuZ2VBbm5vdGF0aW9uczIiLCJhbm5vdGF0aW9ucyIsIl9hbm5vdGF0aW9ucyIsIl9jb3VudGVyIiwiX3NpemUiLCJjb25maWd1cmFibGUiLCJpZE9yQW5ub3RhdGlvbiIsIm5leHRJZCIsInRvU3RyaW5nIiwiV29ya3NwYWNlQ2hhbmdlMiIsIndvcmtzcGFjZUVkaXQiLCJfdGhpcyIsIl90ZXh0RWRpdENoYW5nZXMiLCJfd29ya3NwYWNlRWRpdCIsIl9jaGFuZ2VBbm5vdGF0aW9ucyIsImZvckVhY2giLCJ0ZXh0RWRpdENoYW5nZSIsImtleXMiLCJpbml0RG9jdW1lbnRDaGFuZ2VzIiwic2l6ZSIsImdldFRleHRFZGl0Q2hhbmdlIiwidmVyc2lvbiIsInRleHREb2N1bWVudEVkaXQiLCJpbml0Q2hhbmdlcyIsImNyZWF0ZUZpbGUiLCJvcHRpb25zT3JBbm5vdGF0aW9uIiwib3BlcmF0aW9uIiwicmVuYW1lRmlsZSIsImRlbGV0ZUZpbGUiLCJ0ZXh0IiwiUGxhaW5UZXh0IiwiTWFya2Rvd24iLCJUZXh0IiwiTWV0aG9kIiwiRnVuY3Rpb24iLCJDb25zdHJ1Y3RvciIsIkZpZWxkIiwiVmFyaWFibGUiLCJDbGFzcyIsIkludGVyZmFjZSIsIk1vZHVsZSIsIlByb3BlcnR5IiwiVW5pdCIsIlZhbHVlIiwiRW51bSIsIktleXdvcmQiLCJTbmlwcGV0IiwiRmlsZSIsIlJlZmVyZW5jZSIsIkZvbGRlciIsIkVudW1NZW1iZXIiLCJDb25zdGFudCIsIlN0cnVjdCIsIkV2ZW50IiwiT3BlcmF0b3IiLCJUeXBlUGFyYW1ldGVyIiwiYXNJcyIsImFkanVzdEluZGVudGF0aW9uIiwiaXRlbXMiLCJpc0luY29tcGxldGUiLCJmcm9tUGxhaW5UZXh0IiwicGxhaW5UZXh0IiwibGFuZ3VhZ2UiLCJjb250ZW50cyIsImRvY3VtZW50YXRpb24iLCJwYXJhbWV0ZXJzIiwiUmVhZCIsIldyaXRlIiwiTmFtZXNwYWNlIiwiUGFja2FnZSIsIlN0cmluZyIsIkJvb2xlYW4iLCJLZXkiLCJOdWxsIiwibmFtZSIsImNvbnRhaW5lck5hbWUiLCJkZXRhaWwiLCJzZWxlY3Rpb25SYW5nZSIsImNoaWxkcmVuIiwiZGVwcmVjYXRlZCIsInRhZ3MiLCJFbXB0eSIsIlF1aWNrRml4IiwiUmVmYWN0b3IiLCJSZWZhY3RvckV4dHJhY3QiLCJSZWZhY3RvcklubGluZSIsIlJlZmFjdG9yUmV3cml0ZSIsIlNvdXJjZSIsIlNvdXJjZU9yZ2FuaXplSW1wb3J0cyIsIlNvdXJjZUZpeEFsbCIsImRpYWdub3N0aWNzIiwib25seSIsImtpbmRPckNvbW1hbmRPckVkaXQiLCJjaGVja0tpbmQiLCJpc1ByZWZlcnJlZCIsImRhdGEiLCJ0YWJTaXplIiwiaW5zZXJ0U3BhY2VzIiwicGFyZW50IiwiVGV4dERvY3VtZW50MiIsIm1lcmdlU29ydCIsImNvbXBhcmUiLCJwIiwibGVmdCIsInNsaWNlIiwicmlnaHQiLCJsZWZ0SWR4IiwicmlnaHRJZHgiLCJpIiwicmV0IiwiY29udGVudCIsIkZ1bGxUZXh0RG9jdW1lbnQiLCJsaW5lQ291bnQiLCJmdW5jIiwiZ2V0VGV4dCIsInBvc2l0aW9uQXQiLCJvZmZzZXRBdCIsImFwcGx5RWRpdHMiLCJkb2N1bWVudCIsInNvcnRlZEVkaXRzIiwiYSIsImIiLCJkaWZmIiwibGFzdE1vZGlmaWVkT2Zmc2V0IiwiZSIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0Iiwic3Vic3RyaW5nIiwiSXMyIiwiRnVsbFRleHREb2N1bWVudDIiLCJfdXJpIiwiX2xhbmd1YWdlSWQiLCJfdmVyc2lvbiIsIl9jb250ZW50IiwiX2xpbmVPZmZzZXRzIiwidXBkYXRlIiwiZXZlbnQiLCJnZXRMaW5lT2Zmc2V0cyIsImxpbmVPZmZzZXRzIiwiaXNMaW5lU3RhcnQiLCJjaCIsImNoYXJBdCIsIm9mZnNldCIsIk1hdGgiLCJtYXgiLCJtaW4iLCJsb3ciLCJoaWdoIiwibWlkIiwiZmxvb3IiLCJsaW5lT2Zmc2V0IiwibmV4dExpbmVPZmZzZXQiLCJmcm9tUG9zaXRpb24iLCJjb2x1bW4iLCJsaW5lTnVtYmVyIiwidG9SYW5nZSIsInRvQ29tcGxldGlvbkl0ZW1LaW5kIiwibUl0ZW1LaW5kIiwibGFuZ3VhZ2VzIiwidG9UZXh0RWRpdCIsImNoZWNrIiwiSG92ZXJBZGFwdGVyIiwicHJvdmlkZUhvdmVyIiwibW9kZWwiLCJ0b2tlbiIsInJlc291cmNlIiwid29ya2VyIiwiZG9Ib3ZlciIsImluZm8iLCJ0b01hcmtlZFN0cmluZ0FycmF5IiwidG9NYXJrZG93blN0cmluZyIsImVudHJ5IiwidGhpbmciLCJtYXAiLCJEb2N1bWVudEhpZ2hsaWdodEFkYXB0ZXIiLCJwcm92aWRlRG9jdW1lbnRIaWdobGlnaHRzIiwiZmluZERvY3VtZW50SGlnaGxpZ2h0cyIsImVudHJpZXMiLCJ0b0RvY3VtZW50SGlnaGxpZ2h0S2luZCIsIlJlbmFtZUFkYXB0ZXIiLCJwcm92aWRlUmVuYW1lRWRpdHMiLCJuZXdOYW1lIiwiZG9SZW5hbWUiLCJyZXNvdXJjZUVkaXRzIiwiVXJpIiwicGFyc2UiLCJ0b1dvcmtzcGFjZUVkaXQiLCJEb2N1bWVudFN5bWJvbEFkYXB0ZXIiLCJwcm92aWRlRG9jdW1lbnRTeW1ib2xzIiwiZmluZERvY3VtZW50U3ltYm9scyIsIml0ZW0iLCJ0b1N5bWJvbEtpbmQiLCJtS2luZCIsIkRvY3VtZW50TGlua0FkYXB0ZXIiLCJwcm92aWRlTGlua3MiLCJmaW5kRG9jdW1lbnRMaW5rcyIsImxpbmtzIiwidXJsIiwiRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyIiwicHJvdmlkZURvY3VtZW50Rm9ybWF0dGluZ0VkaXRzIiwiZm9ybWF0IiwiZnJvbUZvcm1hdHRpbmdPcHRpb25zIiwiRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIiLCJwcm92aWRlRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0cyIsInN0YXJ0TGluZU51bWJlciIsInN0YXJ0Q29sdW1uIiwiZW5kTGluZU51bWJlciIsImVuZENvbHVtbiIsImZyb21SYW5nZSIsIkZvbGRpbmdSYW5nZUFkYXB0ZXIiLCJwcm92aWRlRm9sZGluZ1JhbmdlcyIsImNvbnRleHQiLCJnZXRGb2xkaW5nUmFuZ2VzIiwicmFuZ2VzIiwiQ29tbWVudCIsIkltcG9ydHMiLCJSZWdpb24iLCJ0b0ZvbGRpbmdSYW5nZUtpbmQiLCJTZWxlY3Rpb25SYW5nZUFkYXB0ZXIiLCJwcm92aWRlU2VsZWN0aW9uUmFuZ2VzIiwicG9zaXRpb25zIiwiZ2V0U2VsZWN0aW9uUmFuZ2VzIiwic2VsZWN0aW9uUmFuZ2VzIiwiSFRNTENvbXBsZXRpb25BZGFwdGVyIiwiX3RyaWdnZXJDaGFyYWN0ZXJzIiwidHJpZ2dlckNoYXJhY3RlcnMiLCJwcm92aWRlQ29tcGxldGlvbkl0ZW1zIiwiZG9Db21wbGV0ZSIsIndvcmRJbmZvIiwiZ2V0V29yZFVudGlsUG9zaXRpb24iLCJ3b3JkUmFuZ2UiLCJpbnNlcnRUZXh0Iiwic29ydFRleHQiLCJmaWx0ZXJUZXh0IiwiYyIsImluc2VydFRleHRGb3JtYXQiLCJpbnNlcnRUZXh0UnVsZXMiLCJDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlIiwiSW5zZXJ0QXNTbmlwcGV0Iiwic3VnZ2VzdGlvbnMiLCJzdXBlciIsInNldHVwTW9kZTEiLCJ1cmlzIiwicmVnaXN0ZXJDb21wbGV0aW9uSXRlbVByb3ZpZGVyIiwicmVnaXN0ZXJIb3ZlclByb3ZpZGVyIiwicmVnaXN0ZXJEb2N1bWVudEhpZ2hsaWdodFByb3ZpZGVyIiwicmVnaXN0ZXJMaW5rUHJvdmlkZXIiLCJyZWdpc3RlckZvbGRpbmdSYW5nZVByb3ZpZGVyIiwicmVnaXN0ZXJEb2N1bWVudFN5bWJvbFByb3ZpZGVyIiwicmVnaXN0ZXJTZWxlY3Rpb25SYW5nZVByb3ZpZGVyIiwicmVnaXN0ZXJSZW5hbWVQcm92aWRlciIsInJlZ2lzdGVyRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyIiwicmVnaXN0ZXJEb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXRQcm92aWRlciIsInNldHVwTW9kZSIsImRpc3Bvc2FibGVzIiwicHJvdmlkZXJzIiwibW9kZUNvbmZpZ3VyYXRpb24iLCJkaXNwb3NlQWxsIiwiY29tcGxldGlvbkl0ZW1zIiwiaG92ZXJzIiwiZG9jdW1lbnRIaWdobGlnaHRzIiwiZG9jdW1lbnRTeW1ib2xzIiwicmVuYW1lIiwiZm9sZGluZ1JhbmdlcyIsImRvY3VtZW50Rm9ybWF0dGluZ0VkaXRzIiwiZG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0cyIsInJlZ2lzdGVyUHJvdmlkZXJzIiwiYXNEaXNwb3NhYmxlIiwicG9wIl0sInNvdXJjZVJvb3QiOiIifQ==